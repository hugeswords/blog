{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/小囧熊.gif","path":"images/小囧熊.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/back-tech.png","path":"images/back-tech.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"0d55aa80c8f323066dbc410bc9b9ff3ac67d2593","modified":1536029216094},{"_id":"source/README.md","hash":"cb753617ac713b920f370a88f6ccdef545e5f54a","modified":1536029195045},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1536309918695},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1536309918695},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1536309918695},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1536309918695},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1536309918695},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1536309918695},{"_id":"themes/next/README.cn.md","hash":"23e92a2599725db2f8dbd524fbef2087c6d11c7b","modified":1536309918695},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1536309918695},{"_id":"themes/next/README.md","hash":"50abff86ffe4113051a409c1ed9261195d2aead0","modified":1536309918695},{"_id":"themes/next/_config.yml","hash":"d6d50699bf52a9bb10a55c24650663d947501081","modified":1539571847518},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1536309918695},{"_id":"themes/next/package.json","hash":"3963ad558a24c78a3fd4ef23cf5f73f421854627","modified":1536309918742},{"_id":"themes/next/bower.json","hash":"486ebd72068848c97def75f36b71cbec9bb359c5","modified":1536309918695},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1536309918695},{"_id":"source/_posts/STL系列一：array.md","hash":"9620d34ab732fa53c8d9fd9a92828a6a84b72430","modified":1541041409286},{"_id":"source/_posts/hexo简单使用.md","hash":"f510f39d4f5111ca3b5af89053e4c50d43b107be","modified":1536228272125},{"_id":"source/_posts/const关键字.md","hash":"7649fafe9991f780d28151fcd01760e20a68ef4f","modified":1539604453594},{"_id":"source/_posts/mysql的各种log.md","hash":"1ed40e69a6e30670fdb0728eecd86eea3d7df628","modified":1539570427773},{"_id":"source/_posts/gprof简单使用.md","hash":"6cf2cc2bfd99c0a2b99c34c9d84aa071523d080f","modified":1539570147402},{"_id":"source/_posts/static关键字.md","hash":"12aad66008f280af4f687c433ebddd6cb48e983d","modified":1539576292353},{"_id":"source/_posts/perf简单使用.md","hash":"1bc89996e6c5631033d9c70876e066a5070f2145","modified":1539570248585},{"_id":"source/tags/index.md","hash":"c6a83e68c9093db116def47a2f96b2ed6f2308af","modified":1538298339399},{"_id":"source/categories/index.md","hash":"f08dd8a80c00af9dfbe1fd92de4f1c98aa59af33","modified":1536579938674},{"_id":"source/_posts/mysql索引.md","hash":"d87d64b5c6ff11be18081a854c221b5dd6f10fd7","modified":1539571424272},{"_id":"source/_posts/头文件重复引用.md","hash":"465216770aacdec8fe919e7571c36099cb3638af","modified":1539570379230},{"_id":"source/_posts/事务隔离级别.md","hash":"1abe052ad50e7eee9b6c5032d2def9be0c8d09ea","modified":1539570204748},{"_id":"source/_posts/tcp状态.md","hash":"5f00f7b00a5b99ec83b0382a688fd007774706af","modified":1539570486648},{"_id":"source/_posts/sum条件求和.md","hash":"b5d095cc911035bec331d8390e0fbdb91ca6cd01","modified":1540521971948},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1536309918711},{"_id":"themes/next/languages/en.yml","hash":"2f4b4776ca1a08cc266a19afb0d1350a3926f42c","modified":1536309918711},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1536309918711},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1536309918711},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1536309918711},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1536309918711},{"_id":"themes/next/languages/nl-NL.yml","hash":"213e7a002b82fb265f69dabafbbc382cfd460030","modified":1536309918711},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1536309918711},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1536309918711},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1536309918711},{"_id":"themes/next/languages/vi.yml","hash":"a9b89ebd3e5933033d1386c7c56b66c44aca299a","modified":1536309918711},{"_id":"themes/next/languages/zh-Hans.yml","hash":"fc2ad1f8dfa0e13ee4fd22d03f2094d927b80671","modified":1536310358362},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1536309918695},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1536309918711},{"_id":"themes/next/layout/_layout.swig","hash":"2164570bb05db11ee4bcfbbb5d183a759afe9d07","modified":1536309918711},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1536309918742},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1536309918742},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1536309918742},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1536309918742},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1536309918742},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1536309918742},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1536309918742},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1536309918742},{"_id":"themes/next/languages/zh-hk.yml","hash":"fe0d45807d015082049f05b54714988c244888da","modified":1536309918711},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1536309918742},{"_id":"themes/next/languages/zh-tw.yml","hash":"432463b481e105073accda16c3e590e54c8e7b74","modified":1536309918711},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1536309918858},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1536309918858},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1536309918858},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536309918774},{"_id":"source/_posts/static关键字/static.pptx","hash":"218409735141642065dd6572a4a90badfe0a96c1","modified":1539326112213},{"_id":"source/_posts/static关键字/top.png","hash":"7f79b30534a47935c9ac19403f1f04a85d8e2b35","modified":1539326107877},{"_id":"source/_posts/static关键字/内存分布.png","hash":"0a3f3e030f395dce957de5a4ff3083408756c125","modified":1539328985756},{"_id":"source/_posts/头文件重复引用/top.jpg","hash":"e5062e20a187b3741c846561aa946f7ba96ffd12","modified":1539571208821},{"_id":"source/_posts/头文件重复引用/头文件.pptx","hash":"8fd831fc456a0d5e1499b8b97a619f45607dbdaf","modified":1539571212644},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1536309918711},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1536309918711},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1536309918711},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1536309918711},{"_id":"themes/next/layout/_macro/post.swig","hash":"4ba938822d56c597490f0731893eaa2443942e0f","modified":1536309918711},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1536309918711},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1536309918711},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9c7343fd470e0943ebd75f227a083a980816290b","modified":1536309918711},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1536309918711},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1aeeacbee76193ad2f47f69329a6dbacca73adef","modified":1539174457605},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1536309918711},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1536309918726},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1536309918726},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1536309918726},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1536309918726},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1536309918742},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1536309918742},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1536309918742},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1536309918742},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1536309918742},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1536309918742},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1536309918742},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1536309918726},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1536309918726},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1536309918726},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1536309918774},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1536309918774},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1536309918774},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1536309918774},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1536309918774},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1536309918774},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1536309918774},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1536309918774},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1536309918774},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1536309918774},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1536309918774},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1536309918774},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536309918774},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1536309918775},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1536309918774},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1536309918776},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1536309918776},{"_id":"themes/next/source/images/小囧熊.gif","hash":"d2794e3f5cbf4c5bd620e243ac01f776c03c7c83","modified":1536580834484},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1536309918742},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1536309918742},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1536309918742},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1536309918742},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1536309918742},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1536309918742},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1536309918742},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1536309918742},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1536309918742},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1536309918775},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1536309918774},{"_id":"source/_posts/tcp状态/tcp_open_close.jpg","hash":"d42e412fd11045e5f11d316937f9541bfc9ce1e2","modified":1537186041304},{"_id":"source/_posts/tcp状态/tcp_state.gif","hash":"ad60386947128beace5bba80978659d21f1bcb51","modified":1537187791046},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536309918726},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536309918726},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536309918773},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536309918773},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536309918773},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536309918774},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1536309918774},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1536309918711},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1536309918711},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1536309918726},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1536309918726},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1536309918726},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1536309918726},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1536309918726},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1536309918726},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1536309918726},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1536309918726},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1536309918726},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1536309918726},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1536309918726},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1536309918726},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1536309918726},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1536309918726},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1536309918726},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1536309918742},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1536309918726},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1536309918742},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1536309918742},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1536309918742},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1536309918742},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1536309918726},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1536309918726},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1536309918726},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"ba955e3c4d90ebd23205ced168b737d98eef446f","modified":1539334851539},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1536309918773},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1536309918773},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1536309918773},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1536309918774},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"58e7dd5947817d9fc30770712fc39b2f52230d1e","modified":1536309918774},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"4069f918ccc312da86db6c51205fc6c6eaabb116","modified":1536309918774},{"_id":"themes/next/source/css/_variables/base.styl","hash":"b1f6ea881a4938a54603d68282b0f8efb4d7915d","modified":1536309918774},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1536309918810},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1536309918810},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1536309918810},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1536309918826},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1536309918826},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"b02737510e9b89aeed6b54f89f602a9c24b06ff2","modified":1536309918810},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1536309918826},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1536309918826},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1536309918841},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"14264a210bf94232d58d7599ea2ba93bfa4fb458","modified":1536309918857},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1536309918841},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"2ce5f3bf15c523b9bfc97720d8884bb22602a454","modified":1536309918857},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1536309918841},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1536309918857},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1536309918857},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1536309918857},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1536309918857},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"e33aa8fa48b6639d8d8b937d13261597dd473b3a","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1536309918857},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1536309918857},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1536309918858},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1536309918858},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1536309918858},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1536309918858},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1536309918858},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1536309918858},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1536309918858},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1536309918858},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1536309918777},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1536309918777},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1536309918777},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1536309918778},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1536309918778},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1536309918778},{"_id":"themes/next/source/js/src/post-details.js","hash":"93a18271b4123dd8f94f09d1439b47c3c19a8712","modified":1536309918795},{"_id":"themes/next/source/js/src/motion.js","hash":"885176ed51d468f662fbf0fc09611f45c7e5a3b1","modified":1536309918779},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1536309918810},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1536309918810},{"_id":"themes/next/source/js/src/utils.js","hash":"b3e9eca64aba59403334f3fa821f100d98d40337","modified":1536309918810},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1536309918841},{"_id":"source/_posts/mysql索引/top.png","hash":"9c5b175d83e006e78ca4ad698cfde71de29a3bcf","modified":1539240863221},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1536309918742},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1536309918742},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"8f86f694c0749a18ab3ad6f6df75466ca137a4bc","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"8b32928686c327151e13d3ab100157f9a03cd59f","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1536309918773},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1536309918773},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1536309918773},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1536309918773},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1536309918773},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"91ca75492cd51f2553f4d294ed2f48239fcd55eb","modified":1536309918773},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1536309918773},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1536309918773},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"9c99034f8e00d47e978b3959f51eb4a9ded0fcc8","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e695e58f714129ca292c2e54cd62c251aca7f7fe","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"60fa84aa7731760f05f52dd7d8f79b5f74ac478d","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"ad2dcedf393ed1f3f5afd2508d24969c916d02fc","modified":1536309918774},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1536309918810},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1536309918810},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1536309918826},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1536309918826},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1536309918826},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1536309918826},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1536309918826},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1536309918858},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1536309918858},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"f1d0b5d7af32c423eaa8bb93ab6a0b45655645dc","modified":1536309918795},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1536309918810},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1536309918841},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1536309918841},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1536309918858},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"50450d9fdc8a2b2be8cfca51e3e1a01ffd636c0b","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"a6c6eb8adba0a090ad1f4b9124e866887f20d10d","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"7968343e41f8b94b318c36289dff1196c3eb1791","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"89d6c3b697efc63de42afd2e89194b1be14152af","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"c8fe49a4bc014c24dead05b782a7082411a4abc5","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"5ef6343835f484a2c0770bd1eb9cc443609e4c39","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"f825da191816eef69ea8efb498a7f756d5ebb498","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"b7076e58d647265ee0ad2b461fe8ce72c9373bc5","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"874278147115601d2abf15987f5f7a84ada1ac6b","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9c8196394a89dfa40b87bf0019e80144365a9c93","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"28825ae15fa20ae3942cdaa7bcc1f3523ce59acc","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1536309918773},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1536309918757},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1536309918757},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1536309918774},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1536309918774},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1536309918810},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1536309918810},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1536309918810},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1536309918810},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1536309918810},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1536309918826},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1536309918826},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1536309918826},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1536309918826},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1536309918810},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1536309918826},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1536309918841},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1536309918810},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1536309918858},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1536309918841},{"_id":"themes/next/source/images/back-tech.png","hash":"1d3000f6025d93c342007a368eeb17242b16933b","modified":1538293057520},{"_id":"public/README.html","hash":"171b0ac9a24bf83ac1479cf221fea1412f69f515","modified":1541041420518},{"_id":"public/categories/index.html","hash":"ab61e9e63e10e1e1cf907df59515c0b5029437dd","modified":1541041420520},{"_id":"public/tags/index.html","hash":"81dce69f72edc67bf8747395c740c7adb356a92c","modified":1541041420520},{"_id":"public/2015/01/20/perf简单使用/index.html","hash":"e4cfa5d9bf818f84ca736b87330ee5a6509e3bed","modified":1541041420520},{"_id":"public/2015/01/20/gprof简单使用/index.html","hash":"c947389e1b3c1ffc7d190bab3d5d6f8603588d62","modified":1541041420520},{"_id":"public/categories/编程基础/index.html","hash":"d023075004b5bdef82ffbbdd67d60aae1c28b9eb","modified":1541041420520},{"_id":"public/categories/数据库/index.html","hash":"87d1dad73b10b14061bf35cf492681862260220c","modified":1541041420520},{"_id":"public/categories/网络/index.html","hash":"f5c3969f70dd2acda87ea66dda6a1549a90bdfbe","modified":1541041420521},{"_id":"public/archives/page/2/index.html","hash":"139282312a32764eabc4b3c4274535d4b699b61d","modified":1541041420521},{"_id":"public/archives/2015/page/2/index.html","hash":"19cf9f1447bd453baedaf33cff9864be3ef5df6e","modified":1541041420521},{"_id":"public/archives/2015/01/index.html","hash":"f7afea74569f4657edbba1a8d0a29645e6e05101","modified":1541041420521},{"_id":"public/archives/2015/03/index.html","hash":"2027245e4426e34624fcff862511757fea0a6c37","modified":1541041420521},{"_id":"public/archives/2015/04/index.html","hash":"d4317593145d37d86d9ac088fb9827b91b2f7d08","modified":1541041420521},{"_id":"public/archives/2015/06/index.html","hash":"d006ee3af7d7489c44e3a696aabe852b691747ea","modified":1541041420521},{"_id":"public/page/2/index.html","hash":"8074208eef04469e0cdb7aa7018e0e209648b129","modified":1541041420521},{"_id":"public/tags/c/index.html","hash":"ed54edc3d72dffdd6ef373ec3199754fb0e5cfbe","modified":1541041420522},{"_id":"public/tags/static/index.html","hash":"4609e685ee34c36381f91dd2b7d87fe543799809","modified":1541041420522},{"_id":"public/categories/工具/index.html","hash":"815fd2b538c86f023baec54d7c45c0477d267e96","modified":1541041420522},{"_id":"public/tags/数据库/index.html","hash":"61a7a70031eb5e4c96cb2e45e18f780a75329295","modified":1541041420522},{"_id":"public/tags/工具/index.html","hash":"06ed631009ddb27319922e07020bd42f96f66da3","modified":1541041420522},{"_id":"public/tags/数据库，索引/index.html","hash":"9abb44bd09589bbea207c22cdf0ce62e48e37e54","modified":1541041420522},{"_id":"public/tags/头文件/index.html","hash":"63df6bb1e011053fedc210d05b349b21137e9c3d","modified":1541041420522},{"_id":"public/2015/06/23/sum条件求和/index.html","hash":"1f9a369980d710f5d1b9a63058aaea0e4e27c104","modified":1541041420522},{"_id":"public/2015/04/01/tcp状态/index.html","hash":"db24a7db58647fe7f80c2916b0b9c37ccbc199cb","modified":1541041420522},{"_id":"public/2015/03/03/const关键字/index.html","hash":"e37f1c19572d2d0e196395edf0a9dd0205fd1d5c","modified":1541041420522},{"_id":"public/2015/03/01/头文件重复引用/index.html","hash":"d8518595545b2c290955882943b22d898ceec963","modified":1541041420522},{"_id":"public/2015/03/02/static关键字/index.html","hash":"397d088b551d1772d6bfb8be74c8b96afa2ae2d1","modified":1541041420522},{"_id":"public/2015/01/23/mysql索引/index.html","hash":"9d1a68569fec9fb18c6c1d9bc7fa129722abd12b","modified":1541041420522},{"_id":"public/2015/01/22/事务隔离级别/index.html","hash":"042b82bb3ad591f769b49987d013cc423a9669fe","modified":1541041420523},{"_id":"public/2015/01/21/mysql的各种log/index.html","hash":"591b1cb4244d9bb1e58b1bf869f09670493adaac","modified":1541041420523},{"_id":"public/2015/01/19/hexo简单使用/index.html","hash":"6e046270aa545510324dde99157ef0e6aa9d7b68","modified":1541041420523},{"_id":"public/archives/index.html","hash":"8475be98ba08940acc1158cfb46ce92883aa778e","modified":1541041420523},{"_id":"public/archives/2015/index.html","hash":"2bdc3285bd901dc6d714577f75b953fdf4787965","modified":1541041420523},{"_id":"public/index.html","hash":"04611eb4a7b8c98cec06fcb948491a378f952adb","modified":1541041420523},{"_id":"public/categories/STL/index.html","hash":"cb61accd0f3f3bb72f6e2cee31955c3ed754c7f0","modified":1541041420545},{"_id":"public/archives/2018/index.html","hash":"e495c40ff61ba8c224d52ee2c21140fb704b3aef","modified":1541041420545},{"_id":"public/archives/2018/11/index.html","hash":"e53a42fad28afe2ec24c03e01ae55d4232304a65","modified":1541041420545},{"_id":"public/tags/STL/index.html","hash":"0927bbbe2091e3228af45c6ff8f6457e48eb1da0","modified":1541041420545},{"_id":"public/tags/网络/index.html","hash":"dff7d74bb11bc8370caeb35b8b70843ed5636f72","modified":1541041420545},{"_id":"public/tags/extern/index.html","hash":"4e3e0ba6a8daf213f11447b036c31b88707cce16","modified":1541041420545},{"_id":"public/2018/11/01/STL系列一：array/index.html","hash":"21ec2599b1baeaeeb363ad9c0192805cbc680115","modified":1541041420546},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1541041420557},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1541041420557},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1541041420558},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1541041420558},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1541041420558},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1541041420558},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1541041420558},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1541041420558},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541041420558},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1541041420558},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1541041420558},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1541041420558},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1541041420559},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1541041420559},{"_id":"public/images/小囧熊.gif","hash":"d2794e3f5cbf4c5bd620e243ac01f776c03c7c83","modified":1541041420559},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1541041420559},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1541041420559},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1541041420559},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1541041420559},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1541041420559},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1541041420559},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1541041420559},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1541041420559},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1541041420560},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1541041420560},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1541041420560},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1541041420560},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1541041420560},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1541041420560},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1541041420560},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1541041420560},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1541041420561},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1541041420561},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1541041420561},{"_id":"public/2015/03/01/头文件重复引用/头文件.pptx","hash":"8fd831fc456a0d5e1499b8b97a619f45607dbdaf","modified":1541041420561},{"_id":"public/2015/03/01/头文件重复引用/top.jpg","hash":"e5062e20a187b3741c846561aa946f7ba96ffd12","modified":1541041420561},{"_id":"public/2015/03/02/static关键字/static.pptx","hash":"218409735141642065dd6572a4a90badfe0a96c1","modified":1541041420561},{"_id":"public/2015/03/02/static关键字/top.png","hash":"7f79b30534a47935c9ac19403f1f04a85d8e2b35","modified":1541041420561},{"_id":"public/2015/03/02/static关键字/内存分布.png","hash":"0a3f3e030f395dce957de5a4ff3083408756c125","modified":1541041420561},{"_id":"public/CNAME","hash":"0d55aa80c8f323066dbc410bc9b9ff3ac67d2593","modified":1541041420562},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1541041421416},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1541041421425},{"_id":"public/2015/04/01/tcp状态/tcp_open_close.jpg","hash":"d42e412fd11045e5f11d316937f9541bfc9ce1e2","modified":1541041421432},{"_id":"public/2015/04/01/tcp状态/tcp_state.gif","hash":"ad60386947128beace5bba80978659d21f1bcb51","modified":1541041421432},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1541041421539},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1541041421539},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1541041421539},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1541041421540},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1541041421540},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1541041421540},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1541041421540},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1541041421540},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1541041421540},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1541041421541},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1541041421541},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1541041421541},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1541041421541},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1541041421541},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1541041421541},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1541041421541},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1541041421541},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1541041421541},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1541041421542},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1541041421542},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1541041421542},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1541041421542},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1541041421542},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1541041421542},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1541041421542},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1541041421543},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1541041421543},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1541041421543},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1541041421543},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1541041421543},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1541041421543},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1541041421543},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1541041421544},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1541041421544},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1541041421544},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1541041421544},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1541041421544},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1541041421544},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1541041421545},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1541041421545},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1541041421545},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1541041421545},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1541041421545},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1541041421545},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1541041421545},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1541041421545},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1541041421545},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1541041421545},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1541041421546},{"_id":"public/css/main.css","hash":"fe12822c446c89b341298d052e2a15a0518a061d","modified":1541041421546},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1541041421546},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1541041421546},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1541041421546},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1541041421546},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1541041421546},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1541041421546},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1541041421546},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1541041421546},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1541041421547},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1541041421547},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1541041421547},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1541041421547},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1541041421547},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1541041421547},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1541041421547},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1541041421548},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1541041421548},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1541041421549},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1541041421549},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1541041421549},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1541041421550},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1541041421550},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1541041421550},{"_id":"public/2015/01/23/mysql索引/top.png","hash":"9c5b175d83e006e78ca4ad698cfde71de29a3bcf","modified":1541041421765},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1541041421801},{"_id":"public/images/back-tech.png","hash":"1d3000f6025d93c342007a368eeb17242b16933b","modified":1541041421964},{"_id":"source/_posts/mysql的inet-aton陷阱/inet.jpg","hash":"1f46f9c685849fd739e3b2e91526a628c70ff087","modified":1541733487416},{"_id":"source/_posts/mysql的陷阱/inet.jpg","hash":"1f46f9c685849fd739e3b2e91526a628c70ff087","modified":1541733487416},{"_id":"source/_posts/mysql的字节序/inet.jpg","hash":"1f46f9c685849fd739e3b2e91526a628c70ff087","modified":1541733487416},{"_id":"source/_posts/mysql的inet/inet.jpg","hash":"1f46f9c685849fd739e3b2e91526a628c70ff087","modified":1541733487416}],"Category":[{"name":"STL","_id":"cjny09rfv000640v707o0rp9d"},{"name":"编程基础","_id":"cjny09rg3000b40v7296obswt"},{"name":"数据库","_id":"cjny09rg8000g40v737swoa4y"},{"name":"工具","_id":"cjny09rgf000o40v7egvt6ms9"},{"name":"网络","_id":"cjny09rgn001540v77dzgpc0w"}],"Data":[],"Page":[{"_content":"# 贝贝\n","source":"README.md","raw":"# 贝贝\n","date":"2018-09-06T09:36:28.326Z","updated":"2018-09-04T02:46:35.045Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"cjny09rdk000040v759b7u6hl","content":"<h1 id=\"贝贝\"><a href=\"#贝贝\" class=\"headerlink\" title=\"贝贝\"></a>贝贝</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"贝贝\"><a href=\"#贝贝\" class=\"headerlink\" title=\"贝贝\"></a>贝贝</h1>"},{"title":"标签","date":"2018-09-30T08:16:35.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-09-30 16:16:35\ntype: tags\ncomments: false\n---\n","updated":"2018-09-30T09:05:39.399Z","path":"tags/index.html","layout":"page","_id":"cjny09rfm000240v7fm0jzkqf","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-09-10T11:44:34.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-09-10 19:44:34\ntype: \"categories\"\ncomments: false\n---\n","updated":"2018-09-10T11:45:38.674Z","path":"categories/index.html","layout":"page","_id":"cjny09rfq000440v73shw00vv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"hexo 基本用法","date":"2015-01-18T16:34:14.000Z","_content":"\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hexo简单使用.md","raw":"---\ntitle: hexo 基本用法\ndate: 2015-01-19 00:34:14\n---\n\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hexo简单使用","published":1,"updated":"2018-09-06T10:04:32.125Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny09rfi000140v7s9b37q77","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"STL系列一：array","date":"2018-11-01T02:24:13.000Z","_content":"## 简介\narray是固定元素数量的容器，不可以动态调整容器的大小，其实就是和数组一样。\n\n## 使用方法\n\n### 构造方式\narray<Elem,N> c //默认构造函数; 创建一个默认初始化的数组\n\t\t\t\t//array<int, 100>并不会将元素初始化为0\n\narray<Elem,N> c(c2) //复制构造函数; 创建另一个与c2同型的vector副本(所有元素都被复制)\n\narray<Elem,N> c = c2 //复制构造函数; 创建另一个与c2同型的vector副本(所有元素都被复制)\n\narray<Elem,N> c = initlist //使用初始化列表创建一个初始化的数组\n\n\n### 访问方式\n\n1.a[i],可以直接使用下标访问array的元素；\n\n2.at(i),也可以\n\n3.front(),返回第一个元素\n\n4.back()，返回最后一个元素\n\n\n### 常用函数\n1.size()和max_size()都是指数组的大小，他们是一回事\n\n2.bool empty()，数组大小为0就是空\n","source":"_posts/STL系列一：array.md","raw":"---\ntitle: STL系列一：array\ndate: 2018-11-01 10:24:13\ncategories: STL\ntags: [c++,STL]\n---\n## 简介\narray是固定元素数量的容器，不可以动态调整容器的大小，其实就是和数组一样。\n\n## 使用方法\n\n### 构造方式\narray<Elem,N> c //默认构造函数; 创建一个默认初始化的数组\n\t\t\t\t//array<int, 100>并不会将元素初始化为0\n\narray<Elem,N> c(c2) //复制构造函数; 创建另一个与c2同型的vector副本(所有元素都被复制)\n\narray<Elem,N> c = c2 //复制构造函数; 创建另一个与c2同型的vector副本(所有元素都被复制)\n\narray<Elem,N> c = initlist //使用初始化列表创建一个初始化的数组\n\n\n### 访问方式\n\n1.a[i],可以直接使用下标访问array的元素；\n\n2.at(i),也可以\n\n3.front(),返回第一个元素\n\n4.back()，返回最后一个元素\n\n\n### 常用函数\n1.size()和max_size()都是指数组的大小，他们是一回事\n\n2.bool empty()，数组大小为0就是空\n","slug":"STL系列一：array","published":1,"updated":"2018-11-01T03:14:57.407Z","_id":"cjny09rfn000340v7r0zrr0a1","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>array是固定元素数量的容器，不可以动态调整容器的大小，其实就是和数组一样。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"构造方式\"><a href=\"#构造方式\" class=\"headerlink\" title=\"构造方式\"></a>构造方式</h3><p>array&lt;Elem,N&gt; c //默认构造函数; 创建一个默认初始化的数组<br>                //array&lt;int, 100&gt;并不会将元素初始化为0</p>\n<p>array&lt;Elem,N&gt; c(c2) //复制构造函数; 创建另一个与c2同型的vector副本(所有元素都被复制)</p>\n<p>array&lt;Elem,N&gt; c = c2 //复制构造函数; 创建另一个与c2同型的vector副本(所有元素都被复制)</p>\n<p>array&lt;Elem,N&gt; c = initlist //使用初始化列表创建一个初始化的数组</p>\n<h3 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h3><p>1.a[i],可以直接使用下标访问array的元素；</p>\n<p>2.at(i),也可以</p>\n<p>3.front(),返回第一个元素</p>\n<p>4.back()，返回最后一个元素</p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>1.size()和max_size()都是指数组的大小，他们是一回事</p>\n<p>2.bool empty()，数组大小为0就是空</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>array是固定元素数量的容器，不可以动态调整容器的大小，其实就是和数组一样。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"构造方式\"><a href=\"#构造方式\" class=\"headerlink\" title=\"构造方式\"></a>构造方式</h3><p>array&lt;Elem,N&gt; c //默认构造函数; 创建一个默认初始化的数组<br>                //array&lt;int, 100&gt;并不会将元素初始化为0</p>\n<p>array&lt;Elem,N&gt; c(c2) //复制构造函数; 创建另一个与c2同型的vector副本(所有元素都被复制)</p>\n<p>array&lt;Elem,N&gt; c = c2 //复制构造函数; 创建另一个与c2同型的vector副本(所有元素都被复制)</p>\n<p>array&lt;Elem,N&gt; c = initlist //使用初始化列表创建一个初始化的数组</p>\n<h3 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h3><p>1.a[i],可以直接使用下标访问array的元素；</p>\n<p>2.at(i),也可以</p>\n<p>3.front(),返回第一个元素</p>\n<p>4.back()，返回最后一个元素</p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>1.size()和max_size()都是指数组的大小，他们是一回事</p>\n<p>2.bool empty()，数组大小为0就是空</p>\n"},{"title":"const关键字","date":"2015-03-03T11:27:08.000Z","_content":"### 历史\n#define的弊端太多，于是引入了const，所以尽量使用const替代define；\n### 作用范围\nconst定义的常量的作用域类似与static，只能被当前文件访问。\n### 作用\n1.修饰变量，说明该变量不可以被改变；\n2.修饰指针，分为指向常量的指针和指针常量；\n3.常量引用，经常用于形参类型，即避免了拷贝，又避免了函数对值的修改；\n4.修饰成员函数，说明该成员函数内不能修改成员变量。\n\n``` cpp\n    // 类\n    class A\n    {\n    private:\n        const int a;                // 常对象成员，只能在初始化列表赋值\n    \n    public:\n        // 构造函数\n        A() { };\n        A(int x) : a(x) { };        // 初始化列表\n    \n        // const可用于对重载函数的区分\n        int getValue();             // 普通成员函数\n        int getValue() const;       // 常成员函数，不得修改类中的任何数据成员的值\n    };\n    \n    void function()\n    {\n        // 对象\n        A b;                        // 普通对象，可以调用全部成员函数\n        const A a;                  // 常对象，只能调用常成员函数、更新常成员变量\n        const A *p = &a;            // 常指针\n        const A &q = a;             // 常引用\n    \n        // 指针\n        char greeting[] = \"Hello\";\n        char* p1 = greeting;                // 指针变量，指向字符数组变量\n        const char* p2 = greeting;          // 指针变量，指向字符数组常量\n        char* const p3 = greeting;          // 常指针，指向字符数组变量\n        const char* const p4 = greeting;    // 常指针，指向字符数组常量\n    }\n    \n    // 函数\n    void function1(const int Var);           // 传递过来的参数在函数内不可变\n    void function2(const char* Var);         // 参数指针所指内容为常量\n    void function3(char* const Var);         // 参数指针为常指针\n    void function4(const int& Var);          // 引用参数在函数内为常量\n    \n    // 函数返回值\n    const int function5();      // 返回一个常数\n    const int* function6();     // 返回一个指向常量的指针变量，使用：const int *p = function6();\n    int* const function7();     // 返回一个指向变量的常指针，使用：int* const p = function7();\n```\n\n\n","source":"_posts/const关键字.md","raw":"---\ntitle: const关键字\ndate: 2015-03-03 19:27:08\ncategories: 编程基础\ntags: [c++,static]\n---\n### 历史\n#define的弊端太多，于是引入了const，所以尽量使用const替代define；\n### 作用范围\nconst定义的常量的作用域类似与static，只能被当前文件访问。\n### 作用\n1.修饰变量，说明该变量不可以被改变；\n2.修饰指针，分为指向常量的指针和指针常量；\n3.常量引用，经常用于形参类型，即避免了拷贝，又避免了函数对值的修改；\n4.修饰成员函数，说明该成员函数内不能修改成员变量。\n\n``` cpp\n    // 类\n    class A\n    {\n    private:\n        const int a;                // 常对象成员，只能在初始化列表赋值\n    \n    public:\n        // 构造函数\n        A() { };\n        A(int x) : a(x) { };        // 初始化列表\n    \n        // const可用于对重载函数的区分\n        int getValue();             // 普通成员函数\n        int getValue() const;       // 常成员函数，不得修改类中的任何数据成员的值\n    };\n    \n    void function()\n    {\n        // 对象\n        A b;                        // 普通对象，可以调用全部成员函数\n        const A a;                  // 常对象，只能调用常成员函数、更新常成员变量\n        const A *p = &a;            // 常指针\n        const A &q = a;             // 常引用\n    \n        // 指针\n        char greeting[] = \"Hello\";\n        char* p1 = greeting;                // 指针变量，指向字符数组变量\n        const char* p2 = greeting;          // 指针变量，指向字符数组常量\n        char* const p3 = greeting;          // 常指针，指向字符数组变量\n        const char* const p4 = greeting;    // 常指针，指向字符数组常量\n    }\n    \n    // 函数\n    void function1(const int Var);           // 传递过来的参数在函数内不可变\n    void function2(const char* Var);         // 参数指针所指内容为常量\n    void function3(char* const Var);         // 参数指针为常指针\n    void function4(const int& Var);          // 引用参数在函数内为常量\n    \n    // 函数返回值\n    const int function5();      // 返回一个常数\n    const int* function6();     // 返回一个指向常量的指针变量，使用：const int *p = function6();\n    int* const function7();     // 返回一个指向变量的常指针，使用：int* const p = function7();\n```\n\n\n","slug":"const关键字","published":1,"updated":"2018-10-15T11:54:13.594Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny09rfs000540v7h0ysqcvm","content":"<h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><p>#define的弊端太多，于是引入了const，所以尽量使用const替代define；</p>\n<h3 id=\"作用范围\"><a href=\"#作用范围\" class=\"headerlink\" title=\"作用范围\"></a>作用范围</h3><p>const定义的常量的作用域类似与static，只能被当前文件访问。</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>1.修饰变量，说明该变量不可以被改变；<br>2.修饰指针，分为指向常量的指针和指针常量；<br>3.常量引用，经常用于形参类型，即避免了拷贝，又避免了函数对值的修改；<br>4.修饰成员函数，说明该成员函数内不能修改成员变量。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a;                <span class=\"comment\">// 常对象成员，只能在初始化列表赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">    A() &#123; &#125;;</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span> x) : a(x) &#123; &#125;;        <span class=\"comment\">// 初始化列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// const可用于对重载函数的区分</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span></span>;             <span class=\"comment\">// 普通成员函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;       <span class=\"comment\">// 常成员函数，不得修改类中的任何数据成员的值</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对象</span></span><br><span class=\"line\">    A b;                        <span class=\"comment\">// 普通对象，可以调用全部成员函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> A a;                  <span class=\"comment\">// 常对象，只能调用常成员函数、更新常成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> A *p = &amp;a;            <span class=\"comment\">// 常指针</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> A &amp;q = a;             <span class=\"comment\">// 常引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指针</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> greeting[] = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* p1 = greeting;                <span class=\"comment\">// 指针变量，指向字符数组变量</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p2 = greeting;          <span class=\"comment\">// 指针变量，指向字符数组常量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> p3 = greeting;          <span class=\"comment\">// 常指针，指向字符数组变量</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> p4 = greeting;    <span class=\"comment\">// 常指针，指向字符数组常量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function1</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Var)</span></span>;           <span class=\"comment\">// 传递过来的参数在函数内不可变</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function2</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* Var)</span></span>;         <span class=\"comment\">// 参数指针所指内容为常量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function3</span><span class=\"params\">(<span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> Var)</span></span>;         <span class=\"comment\">// 参数指针为常指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function4</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; Var)</span></span>;          <span class=\"comment\">// 引用参数在函数内为常量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> <span class=\"title\">function5</span><span class=\"params\">()</span></span>;      <span class=\"comment\">// 返回一个常数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span>* <span class=\"title\">function6</span><span class=\"params\">()</span></span>;     <span class=\"comment\">// 返回一个指向常量的指针变量，使用：const int *p = function6();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"keyword\">const</span> <span class=\"title\">function7</span><span class=\"params\">()</span></span>;     <span class=\"comment\">// 返回一个指向变量的常指针，使用：int* const p = function7();</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><p>#define的弊端太多，于是引入了const，所以尽量使用const替代define；</p>\n<h3 id=\"作用范围\"><a href=\"#作用范围\" class=\"headerlink\" title=\"作用范围\"></a>作用范围</h3><p>const定义的常量的作用域类似与static，只能被当前文件访问。</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>1.修饰变量，说明该变量不可以被改变；<br>2.修饰指针，分为指向常量的指针和指针常量；<br>3.常量引用，经常用于形参类型，即避免了拷贝，又避免了函数对值的修改；<br>4.修饰成员函数，说明该成员函数内不能修改成员变量。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> a;                <span class=\"comment\">// 常对象成员，只能在初始化列表赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 构造函数</span></span><br><span class=\"line\">    A() &#123; &#125;;</span><br><span class=\"line\">    A(<span class=\"keyword\">int</span> x) : a(x) &#123; &#125;;        <span class=\"comment\">// 初始化列表</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// const可用于对重载函数的区分</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span></span>;             <span class=\"comment\">// 普通成员函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getValue</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;       <span class=\"comment\">// 常成员函数，不得修改类中的任何数据成员的值</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 对象</span></span><br><span class=\"line\">    A b;                        <span class=\"comment\">// 普通对象，可以调用全部成员函数</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> A a;                  <span class=\"comment\">// 常对象，只能调用常成员函数、更新常成员变量</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> A *p = &amp;a;            <span class=\"comment\">// 常指针</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> A &amp;q = a;             <span class=\"comment\">// 常引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指针</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> greeting[] = <span class=\"string\">\"Hello\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span>* p1 = greeting;                <span class=\"comment\">// 指针变量，指向字符数组变量</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* p2 = greeting;          <span class=\"comment\">// 指针变量，指向字符数组常量</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> p3 = greeting;          <span class=\"comment\">// 常指针，指向字符数组变量</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> p4 = greeting;    <span class=\"comment\">// 常指针，指向字符数组常量</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function1</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span> Var)</span></span>;           <span class=\"comment\">// 传递过来的参数在函数内不可变</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function2</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* Var)</span></span>;         <span class=\"comment\">// 参数指针所指内容为常量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function3</span><span class=\"params\">(<span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> Var)</span></span>;         <span class=\"comment\">// 参数指针为常指针</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">function4</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">int</span>&amp; Var)</span></span>;          <span class=\"comment\">// 引用参数在函数内为常量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 函数返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> <span class=\"title\">function5</span><span class=\"params\">()</span></span>;      <span class=\"comment\">// 返回一个常数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span>* <span class=\"title\">function6</span><span class=\"params\">()</span></span>;     <span class=\"comment\">// 返回一个指向常量的指针变量，使用：const int *p = function6();</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span>* <span class=\"keyword\">const</span> <span class=\"title\">function7</span><span class=\"params\">()</span></span>;     <span class=\"comment\">// 返回一个指向变量的常指针，使用：int* const p = function7();</span></span><br></pre></td></tr></table></figure>\n"},{"title":"mysql的各种log","date":"2015-01-21T12:22:02.000Z","_content":"\n\n### binlog\nbinlog日志用于记录所有更新且提交了数据或者已经潜在更新提交了数据（例如，没有匹配任何行的一个DELETE）的所有语句。语句以“事件”的形式保存，它描述数据更改。\n\n作用\n\n1.恢复使能够最大可能地更新数据库，因为二进制日志包含备份后进行的所有更新。\n2.在主复制服务器上记录所有将发送给从服务器的语句。 \n\n主要参数\n1.log_bin:设置此参数表示启用binlog功能，并指定路径名称。\n2.innodb_flush_log_at_trx_commit = N：\n\nN=0  – 每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；\n\nN=1  – 每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上；\n\nN=2  – 每事务提交的时候，把事务日志数据从缓存区写到日志文件中；每隔一秒，刷新一次日志文件，但不一定刷新到磁盘上，而是取决于操作系统的调度；\n3.sync_binlog =  N：\n\nN>0  — 每向二进制日志文件写入N条SQL或N个事务后，则把二进制日志文件的数据刷新到磁盘上；\n\nN=0  — 不主动刷新二进制日志文件的数据到磁盘上，而是由操作系统决定；\n\n推荐配置组合：\n\nN=1,1  — 适合数据安全性要求非常高，而且磁盘IO写能力足够支持业务，比如充值消费系统；\n\nN=1,0  — 适合数据安全性要求高，磁盘IO写能力支持业务不富余，允许备库落后或无复制；\n\nN=2,0或2,m(0<m<100)  — 适合数据安全性有要求，允许丢失一点事务日志，复制架构的延迟也能接受；\n\nN=0,0  — 磁盘IO写能力有限，无复制或允许复制延迟稍微长点能接受，例如：日志性登记业务；\n\n### Undo Log\n\nUndo Log是为了实现事务的原子性，在MySQL数据库InnoDB存储引擎中，还用UndoLog来实现多版本并发控制(简称：MVCC)。\n事务的原子性(Atomicity)：事务中的所有操作，要么全部完成，要么不做任何操作，不能只做部分操作。如果在执行的过程中发了错误，要回滚(Rollback)到事务开始前的状态，就像这个事务从来没有执行过。\n原理\nUndo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为UndoLo）。\n然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用UndoLog中的备份将数据恢复到事务开始之前的状态。\n除了可以保证事务的原子性，Undo Log也可以用来辅助完成事务的持久化。\n\n事务的持久性(Durability)：事务一旦完成，该事务对数据库所做的所有修改都会持久的保存到数据库中。为了保证持久性，数据库系统会将修改后的数据完全的记录到持久的存储上。\n\n-用Undo Log\n\n实现原子性和持久化的事务的简化过程\n\n假设有A、B两个数据，值分别为1,2。\nA.事务开始.\nB.记录A=1到undolog.\nC.修改A=3.\nD.记录B=2到undolog.\nE.修改B=4.\nF.将undolog写到磁盘。\nG.将数据写到磁盘。\nH.事务提交\n这里有一个隐含的前提条件：‘数据都是先读到内存中，然后修改内存中的数据，最后将数据写回磁盘’。\n之所以能同时保证原子性和持久化，是因为以下特点：\nA.更新数据前记录Undo log。\nB.为了保证持久性，必须将数据在事务提交前写到磁盘。只要事务成功提交，数据必然已经持久化。\nC.Undo log\n必须先于数据持久化到磁盘。如果在G,H之间系统崩溃，undo log是完整的，可以用来回滚事务。\n\nD.如果在A-F之间系统崩溃,因为数据没有持久化到磁盘。所以磁盘上的数据还是保持在事务开始前的状态。\n\n缺陷：每个事务提交前将数据和Undo Log写入磁盘，这样会导致大量的磁盘IO，因此性能很低。\n如果能够将数据缓存一段时间，就能减少IO提高性能。但是这样就会丧失事务的持久性。因此引入了另外一种机制来实现持久化，即\n\n\n### Redo log\n记录的是新数据的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，\n但是RedoLog已经持久化。系统可以根据RedoLog的内容，将所有数据恢复到最新的状态。\n\n-Undo+Redo\n事务的简化过程\n假设有A、B两个数据，值分别为1,2.\nA.事务开始.\nB.记录A=1到undolog.\nC.修改A=3.\nD.记录A=3到redolog.\nE.记录B=2到undolog.\nF.修改B=4.\nG.记录B=4到redolog.\nH.将redolog写入磁盘。\nI.事务提交\n\n-Undo+Redo\n事务的特点\nA.为了保证持久性，必须在事务提交前将\nRedoLog持久化。\nB.数据不需要在事务提交前写入磁盘，而是缓存在内存中。\nC.RedoLog保证事务的持久性。\nD.UndoLog保证事务的原子性。\nE.有一个隐含的特点，数据必须要晚于redolog写入持久存","source":"_posts/mysql的各种log.md","raw":"---\ntitle: mysql的各种log\ndate: 2015-01-21 20:22:02\ncategories: 数据库\ntags: 数据库\n---\n\n\n### binlog\nbinlog日志用于记录所有更新且提交了数据或者已经潜在更新提交了数据（例如，没有匹配任何行的一个DELETE）的所有语句。语句以“事件”的形式保存，它描述数据更改。\n\n作用\n\n1.恢复使能够最大可能地更新数据库，因为二进制日志包含备份后进行的所有更新。\n2.在主复制服务器上记录所有将发送给从服务器的语句。 \n\n主要参数\n1.log_bin:设置此参数表示启用binlog功能，并指定路径名称。\n2.innodb_flush_log_at_trx_commit = N：\n\nN=0  – 每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；\n\nN=1  – 每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上；\n\nN=2  – 每事务提交的时候，把事务日志数据从缓存区写到日志文件中；每隔一秒，刷新一次日志文件，但不一定刷新到磁盘上，而是取决于操作系统的调度；\n3.sync_binlog =  N：\n\nN>0  — 每向二进制日志文件写入N条SQL或N个事务后，则把二进制日志文件的数据刷新到磁盘上；\n\nN=0  — 不主动刷新二进制日志文件的数据到磁盘上，而是由操作系统决定；\n\n推荐配置组合：\n\nN=1,1  — 适合数据安全性要求非常高，而且磁盘IO写能力足够支持业务，比如充值消费系统；\n\nN=1,0  — 适合数据安全性要求高，磁盘IO写能力支持业务不富余，允许备库落后或无复制；\n\nN=2,0或2,m(0<m<100)  — 适合数据安全性有要求，允许丢失一点事务日志，复制架构的延迟也能接受；\n\nN=0,0  — 磁盘IO写能力有限，无复制或允许复制延迟稍微长点能接受，例如：日志性登记业务；\n\n### Undo Log\n\nUndo Log是为了实现事务的原子性，在MySQL数据库InnoDB存储引擎中，还用UndoLog来实现多版本并发控制(简称：MVCC)。\n事务的原子性(Atomicity)：事务中的所有操作，要么全部完成，要么不做任何操作，不能只做部分操作。如果在执行的过程中发了错误，要回滚(Rollback)到事务开始前的状态，就像这个事务从来没有执行过。\n原理\nUndo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为UndoLo）。\n然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用UndoLog中的备份将数据恢复到事务开始之前的状态。\n除了可以保证事务的原子性，Undo Log也可以用来辅助完成事务的持久化。\n\n事务的持久性(Durability)：事务一旦完成，该事务对数据库所做的所有修改都会持久的保存到数据库中。为了保证持久性，数据库系统会将修改后的数据完全的记录到持久的存储上。\n\n-用Undo Log\n\n实现原子性和持久化的事务的简化过程\n\n假设有A、B两个数据，值分别为1,2。\nA.事务开始.\nB.记录A=1到undolog.\nC.修改A=3.\nD.记录B=2到undolog.\nE.修改B=4.\nF.将undolog写到磁盘。\nG.将数据写到磁盘。\nH.事务提交\n这里有一个隐含的前提条件：‘数据都是先读到内存中，然后修改内存中的数据，最后将数据写回磁盘’。\n之所以能同时保证原子性和持久化，是因为以下特点：\nA.更新数据前记录Undo log。\nB.为了保证持久性，必须将数据在事务提交前写到磁盘。只要事务成功提交，数据必然已经持久化。\nC.Undo log\n必须先于数据持久化到磁盘。如果在G,H之间系统崩溃，undo log是完整的，可以用来回滚事务。\n\nD.如果在A-F之间系统崩溃,因为数据没有持久化到磁盘。所以磁盘上的数据还是保持在事务开始前的状态。\n\n缺陷：每个事务提交前将数据和Undo Log写入磁盘，这样会导致大量的磁盘IO，因此性能很低。\n如果能够将数据缓存一段时间，就能减少IO提高性能。但是这样就会丧失事务的持久性。因此引入了另外一种机制来实现持久化，即\n\n\n### Redo log\n记录的是新数据的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，\n但是RedoLog已经持久化。系统可以根据RedoLog的内容，将所有数据恢复到最新的状态。\n\n-Undo+Redo\n事务的简化过程\n假设有A、B两个数据，值分别为1,2.\nA.事务开始.\nB.记录A=1到undolog.\nC.修改A=3.\nD.记录A=3到redolog.\nE.记录B=2到undolog.\nF.修改B=4.\nG.记录B=4到redolog.\nH.将redolog写入磁盘。\nI.事务提交\n\n-Undo+Redo\n事务的特点\nA.为了保证持久性，必须在事务提交前将\nRedoLog持久化。\nB.数据不需要在事务提交前写入磁盘，而是缓存在内存中。\nC.RedoLog保证事务的持久性。\nD.UndoLog保证事务的原子性。\nE.有一个隐含的特点，数据必须要晚于redolog写入持久存","slug":"mysql的各种log","published":1,"updated":"2018-10-15T02:27:07.773Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny09rfz000840v7nqs3ob3m","content":"<h3 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h3><p>binlog日志用于记录所有更新且提交了数据或者已经潜在更新提交了数据（例如，没有匹配任何行的一个DELETE）的所有语句。语句以“事件”的形式保存，它描述数据更改。</p>\n<p>作用</p>\n<p>1.恢复使能够最大可能地更新数据库，因为二进制日志包含备份后进行的所有更新。<br>2.在主复制服务器上记录所有将发送给从服务器的语句。 </p>\n<p>主要参数<br>1.log_bin:设置此参数表示启用binlog功能，并指定路径名称。<br>2.innodb_flush_log_at_trx_commit = N：</p>\n<p>N=0  – 每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；</p>\n<p>N=1  – 每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上；</p>\n<p>N=2  – 每事务提交的时候，把事务日志数据从缓存区写到日志文件中；每隔一秒，刷新一次日志文件，但不一定刷新到磁盘上，而是取决于操作系统的调度；<br>3.sync_binlog =  N：</p>\n<p>N&gt;0  — 每向二进制日志文件写入N条SQL或N个事务后，则把二进制日志文件的数据刷新到磁盘上；</p>\n<p>N=0  — 不主动刷新二进制日志文件的数据到磁盘上，而是由操作系统决定；</p>\n<p>推荐配置组合：</p>\n<p>N=1,1  — 适合数据安全性要求非常高，而且磁盘IO写能力足够支持业务，比如充值消费系统；</p>\n<p>N=1,0  — 适合数据安全性要求高，磁盘IO写能力支持业务不富余，允许备库落后或无复制；</p>\n<p>N=2,0或2,m(0&lt;m&lt;100)  — 适合数据安全性有要求，允许丢失一点事务日志，复制架构的延迟也能接受；</p>\n<p>N=0,0  — 磁盘IO写能力有限，无复制或允许复制延迟稍微长点能接受，例如：日志性登记业务；</p>\n<h3 id=\"Undo-Log\"><a href=\"#Undo-Log\" class=\"headerlink\" title=\"Undo Log\"></a>Undo Log</h3><p>Undo Log是为了实现事务的原子性，在MySQL数据库InnoDB存储引擎中，还用UndoLog来实现多版本并发控制(简称：MVCC)。<br>事务的原子性(Atomicity)：事务中的所有操作，要么全部完成，要么不做任何操作，不能只做部分操作。如果在执行的过程中发了错误，要回滚(Rollback)到事务开始前的状态，就像这个事务从来没有执行过。<br>原理<br>Undo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为UndoLo）。<br>然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用UndoLog中的备份将数据恢复到事务开始之前的状态。<br>除了可以保证事务的原子性，Undo Log也可以用来辅助完成事务的持久化。</p>\n<p>事务的持久性(Durability)：事务一旦完成，该事务对数据库所做的所有修改都会持久的保存到数据库中。为了保证持久性，数据库系统会将修改后的数据完全的记录到持久的存储上。</p>\n<p>-用Undo Log</p>\n<p>实现原子性和持久化的事务的简化过程</p>\n<p>假设有A、B两个数据，值分别为1,2。<br>A.事务开始.<br>B.记录A=1到undolog.<br>C.修改A=3.<br>D.记录B=2到undolog.<br>E.修改B=4.<br>F.将undolog写到磁盘。<br>G.将数据写到磁盘。<br>H.事务提交<br>这里有一个隐含的前提条件：‘数据都是先读到内存中，然后修改内存中的数据，最后将数据写回磁盘’。<br>之所以能同时保证原子性和持久化，是因为以下特点：<br>A.更新数据前记录Undo log。<br>B.为了保证持久性，必须将数据在事务提交前写到磁盘。只要事务成功提交，数据必然已经持久化。<br>C.Undo log<br>必须先于数据持久化到磁盘。如果在G,H之间系统崩溃，undo log是完整的，可以用来回滚事务。</p>\n<p>D.如果在A-F之间系统崩溃,因为数据没有持久化到磁盘。所以磁盘上的数据还是保持在事务开始前的状态。</p>\n<p>缺陷：每个事务提交前将数据和Undo Log写入磁盘，这样会导致大量的磁盘IO，因此性能很低。<br>如果能够将数据缓存一段时间，就能减少IO提高性能。但是这样就会丧失事务的持久性。因此引入了另外一种机制来实现持久化，即</p>\n<h3 id=\"Redo-log\"><a href=\"#Redo-log\" class=\"headerlink\" title=\"Redo log\"></a>Redo log</h3><p>记录的是新数据的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，<br>但是RedoLog已经持久化。系统可以根据RedoLog的内容，将所有数据恢复到最新的状态。</p>\n<p>-Undo+Redo<br>事务的简化过程<br>假设有A、B两个数据，值分别为1,2.<br>A.事务开始.<br>B.记录A=1到undolog.<br>C.修改A=3.<br>D.记录A=3到redolog.<br>E.记录B=2到undolog.<br>F.修改B=4.<br>G.记录B=4到redolog.<br>H.将redolog写入磁盘。<br>I.事务提交</p>\n<p>-Undo+Redo<br>事务的特点<br>A.为了保证持久性，必须在事务提交前将<br>RedoLog持久化。<br>B.数据不需要在事务提交前写入磁盘，而是缓存在内存中。<br>C.RedoLog保证事务的持久性。<br>D.UndoLog保证事务的原子性。<br>E.有一个隐含的特点，数据必须要晚于redolog写入持久存</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"binlog\"><a href=\"#binlog\" class=\"headerlink\" title=\"binlog\"></a>binlog</h3><p>binlog日志用于记录所有更新且提交了数据或者已经潜在更新提交了数据（例如，没有匹配任何行的一个DELETE）的所有语句。语句以“事件”的形式保存，它描述数据更改。</p>\n<p>作用</p>\n<p>1.恢复使能够最大可能地更新数据库，因为二进制日志包含备份后进行的所有更新。<br>2.在主复制服务器上记录所有将发送给从服务器的语句。 </p>\n<p>主要参数<br>1.log_bin:设置此参数表示启用binlog功能，并指定路径名称。<br>2.innodb_flush_log_at_trx_commit = N：</p>\n<p>N=0  – 每隔一秒，把事务日志缓存区的数据写到日志文件中，以及把日志文件的数据刷新到磁盘上；</p>\n<p>N=1  – 每个事务提交时候，把事务日志从缓存区写到日志文件中，并且刷新日志文件的数据到磁盘上；</p>\n<p>N=2  – 每事务提交的时候，把事务日志数据从缓存区写到日志文件中；每隔一秒，刷新一次日志文件，但不一定刷新到磁盘上，而是取决于操作系统的调度；<br>3.sync_binlog =  N：</p>\n<p>N&gt;0  — 每向二进制日志文件写入N条SQL或N个事务后，则把二进制日志文件的数据刷新到磁盘上；</p>\n<p>N=0  — 不主动刷新二进制日志文件的数据到磁盘上，而是由操作系统决定；</p>\n<p>推荐配置组合：</p>\n<p>N=1,1  — 适合数据安全性要求非常高，而且磁盘IO写能力足够支持业务，比如充值消费系统；</p>\n<p>N=1,0  — 适合数据安全性要求高，磁盘IO写能力支持业务不富余，允许备库落后或无复制；</p>\n<p>N=2,0或2,m(0&lt;m&lt;100)  — 适合数据安全性有要求，允许丢失一点事务日志，复制架构的延迟也能接受；</p>\n<p>N=0,0  — 磁盘IO写能力有限，无复制或允许复制延迟稍微长点能接受，例如：日志性登记业务；</p>\n<h3 id=\"Undo-Log\"><a href=\"#Undo-Log\" class=\"headerlink\" title=\"Undo Log\"></a>Undo Log</h3><p>Undo Log是为了实现事务的原子性，在MySQL数据库InnoDB存储引擎中，还用UndoLog来实现多版本并发控制(简称：MVCC)。<br>事务的原子性(Atomicity)：事务中的所有操作，要么全部完成，要么不做任何操作，不能只做部分操作。如果在执行的过程中发了错误，要回滚(Rollback)到事务开始前的状态，就像这个事务从来没有执行过。<br>原理<br>Undo Log的原理很简单，为了满足事务的原子性，在操作任何数据之前，首先将数据备份到一个地方（这个存储数据备份的地方称为UndoLo）。<br>然后进行数据的修改。如果出现了错误或者用户执行了ROLLBACK语句，系统可以利用UndoLog中的备份将数据恢复到事务开始之前的状态。<br>除了可以保证事务的原子性，Undo Log也可以用来辅助完成事务的持久化。</p>\n<p>事务的持久性(Durability)：事务一旦完成，该事务对数据库所做的所有修改都会持久的保存到数据库中。为了保证持久性，数据库系统会将修改后的数据完全的记录到持久的存储上。</p>\n<p>-用Undo Log</p>\n<p>实现原子性和持久化的事务的简化过程</p>\n<p>假设有A、B两个数据，值分别为1,2。<br>A.事务开始.<br>B.记录A=1到undolog.<br>C.修改A=3.<br>D.记录B=2到undolog.<br>E.修改B=4.<br>F.将undolog写到磁盘。<br>G.将数据写到磁盘。<br>H.事务提交<br>这里有一个隐含的前提条件：‘数据都是先读到内存中，然后修改内存中的数据，最后将数据写回磁盘’。<br>之所以能同时保证原子性和持久化，是因为以下特点：<br>A.更新数据前记录Undo log。<br>B.为了保证持久性，必须将数据在事务提交前写到磁盘。只要事务成功提交，数据必然已经持久化。<br>C.Undo log<br>必须先于数据持久化到磁盘。如果在G,H之间系统崩溃，undo log是完整的，可以用来回滚事务。</p>\n<p>D.如果在A-F之间系统崩溃,因为数据没有持久化到磁盘。所以磁盘上的数据还是保持在事务开始前的状态。</p>\n<p>缺陷：每个事务提交前将数据和Undo Log写入磁盘，这样会导致大量的磁盘IO，因此性能很低。<br>如果能够将数据缓存一段时间，就能减少IO提高性能。但是这样就会丧失事务的持久性。因此引入了另外一种机制来实现持久化，即</p>\n<h3 id=\"Redo-log\"><a href=\"#Redo-log\" class=\"headerlink\" title=\"Redo log\"></a>Redo log</h3><p>记录的是新数据的备份。在事务提交前，只要将Redo Log持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，<br>但是RedoLog已经持久化。系统可以根据RedoLog的内容，将所有数据恢复到最新的状态。</p>\n<p>-Undo+Redo<br>事务的简化过程<br>假设有A、B两个数据，值分别为1,2.<br>A.事务开始.<br>B.记录A=1到undolog.<br>C.修改A=3.<br>D.记录A=3到redolog.<br>E.记录B=2到undolog.<br>F.修改B=4.<br>G.记录B=4到redolog.<br>H.将redolog写入磁盘。<br>I.事务提交</p>\n<p>-Undo+Redo<br>事务的特点<br>A.为了保证持久性，必须在事务提交前将<br>RedoLog持久化。<br>B.数据不需要在事务提交前写入磁盘，而是缓存在内存中。<br>C.RedoLog保证事务的持久性。<br>D.UndoLog保证事务的原子性。<br>E.有一个隐含的特点，数据必须要晚于redolog写入持久存</p>\n"},{"title":"gprof简单使用","date":"2015-01-20T11:22:27.000Z","_content":"\ngprof实际上只是一个用于读取gmon.out结果文件的工具,通过加入编译参数 -pg，让gcc编译生成的程序在执行之后产生一个profile文件，gprof可以解析这个文件。\n最主要的作用就是可以分析程序中函数的调用次数和调用关系，以及函数消耗时间。\ngprof采用混合方法来收集程序的统计信息，他使用检测方法，在编译过程中在函数入口处插入计数器用于收集每个函数的被调用情况和被调用次数；也使用采样方法，在运行时按一定间隔去检查程序计数器并在分析时找出程序计数器对应的函数来统计函数占用的时间。\n使用方法：\ngcc -pg hello.c\n./a.out\ngprof -b a.out\n","source":"_posts/gprof简单使用.md","raw":"---\ntitle: gprof简单使用\ndate: 2015-01-20 19:22:27\ncategories: 工具\ntags: 工具\n---\n\ngprof实际上只是一个用于读取gmon.out结果文件的工具,通过加入编译参数 -pg，让gcc编译生成的程序在执行之后产生一个profile文件，gprof可以解析这个文件。\n最主要的作用就是可以分析程序中函数的调用次数和调用关系，以及函数消耗时间。\ngprof采用混合方法来收集程序的统计信息，他使用检测方法，在编译过程中在函数入口处插入计数器用于收集每个函数的被调用情况和被调用次数；也使用采样方法，在运行时按一定间隔去检查程序计数器并在分析时找出程序计数器对应的函数来统计函数占用的时间。\n使用方法：\ngcc -pg hello.c\n./a.out\ngprof -b a.out\n","slug":"gprof简单使用","published":1,"updated":"2018-10-15T02:22:27.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny09rg0000940v7ug793qg4","content":"<p>gprof实际上只是一个用于读取gmon.out结果文件的工具,通过加入编译参数 -pg，让gcc编译生成的程序在执行之后产生一个profile文件，gprof可以解析这个文件。<br>最主要的作用就是可以分析程序中函数的调用次数和调用关系，以及函数消耗时间。<br>gprof采用混合方法来收集程序的统计信息，他使用检测方法，在编译过程中在函数入口处插入计数器用于收集每个函数的被调用情况和被调用次数；也使用采样方法，在运行时按一定间隔去检查程序计数器并在分析时找出程序计数器对应的函数来统计函数占用的时间。<br>使用方法：<br>gcc -pg hello.c<br>./a.out<br>gprof -b a.out</p>\n","site":{"data":{}},"excerpt":"","more":"<p>gprof实际上只是一个用于读取gmon.out结果文件的工具,通过加入编译参数 -pg，让gcc编译生成的程序在执行之后产生一个profile文件，gprof可以解析这个文件。<br>最主要的作用就是可以分析程序中函数的调用次数和调用关系，以及函数消耗时间。<br>gprof采用混合方法来收集程序的统计信息，他使用检测方法，在编译过程中在函数入口处插入计数器用于收集每个函数的被调用情况和被调用次数；也使用采样方法，在运行时按一定间隔去检查程序计数器并在分析时找出程序计数器对应的函数来统计函数占用的时间。<br>使用方法：<br>gcc -pg hello.c<br>./a.out<br>gprof -b a.out</p>\n"},{"title":"static关键字","date":"2015-03-02T02:30:14.000Z","photos":["2015/03/02/static关键字/top.png"],"_content":"## static关键字\n　　static 是C/C++中很常用的修饰符，它被用来控制变量的存储方式和可见性。\n\n### static的引入\n　　我们知道在函数内部定义的变量，当程序执行到它的定义处时，编译器为它在栈上分配空间，函数在栈上分配的空间在此函数执行结束时会释放掉，这样就产生了一个问题: 如果想将函数中此变量的值保存至下一次调用时，如何实现？ 最容易想到的方法是定义为全局的变量，但定义一个全局变量有许多缺点，最明显的缺点是破坏了此变量的访问范围（使得在此函数中定义的变量，不仅仅只受此函数控制）。static关键字则可以很好的解决这个问题。\n\n另外，在C++中，需要一个数据对象为整个类而非某个对象服务,同时又力求不破坏类的封装性,即要求此成员隐藏在类的内部，对外不可见时，可将其定义为静态数据。\n\n### 静态数据的存储\n　　全局（静态）存储区：分为DATA段和BSS段。DATA段（全局初始化区）存放初始化的全局变量和静态变量；BSS段（全局未初始化区）存放未初始化的全局变量和静态变量。程序运行结束时自动释放。其中BBS段在程序执行之前会被系统自动清0，所以未初始化的全局变量和静态变量在程序执行之前已经为0。存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。\n\n在C++中static的内部实现机制：静态数据成员要在程序一开始运行时就必须存在。因为函数在程序运行中被调用，所以静态数据成员不能在任何函数内分配空间和初始化。\n       这样，它的空间分配有三个可能的地方，一是作为类的外部接口的头文件，那里有类声明；二是类定义的内部实现，那里有类的成员函数定义；三是应用程序的main()函数前的全局数据声明和定义处。\n      静态数据成员要实际地分配空间，故不能在类的声明中定义（只能声明数据成员）。类声明只声明一个类的“尺寸和规格”，并不进行实际的内存分配，所以在类声明中写成定义是错误的。它也不能在头文件中类声明的外部定义，因为那会造成在多个使用该类的源文件中，对其重复定义。\n      static被引入以告知编译器，将变量存储在程序的静态存储区而非栈上空间，静态数据成员按定义出现的先后顺序依次初始化，注意静态成员嵌套时，要保证所嵌套的成员已经初始化了。消除时的顺序是初始化的反顺序。\n优势：可以节省内存，因为它是所有对象所公有的，因此，对多个对象来说，静态数据成员只存储一处，供所有对象共用。静态数据成员的值对每个对象都是一样，但它的值是可以更新的。只要对静态数据成员的值更新一次，保证所有对象存取更新后的相同的值，这样可以提高时间效率。\n\n## 在C/C++中static的作用\n### 总的来说：\n（1）在修饰变量的时候，static修饰的静态局部变量只执行初始化一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放。\n（2）static修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是extern外部声明也不可以。\n（3）static修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用。Static修饰的变量存放在全局数据区的静态变量区，包括全局静态变量和局部静态变量，都在全局数据区分配内存。初始化的时候自动初始化为0。\n（4）不想被释放的时候，可以使用static修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用static修饰。\n（5）考虑到数据安全性（当程序想要使用全局变量的时候应该先考虑使用static）。\n\n### 静态变量与普通变量\n静态全局变量有以下特点：\n（1）静态变量都在全局数据区分配内存，包括后面将要提到的静态局部变量;\n（2）未经初始化的静态全局变量会被程序自动初始化为0（在函数体内声明的自动变量的值是随机的，除非它被显式初始化，而在函数体外被声明的自动变量也会被初始化为0）；\n（3）静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的。\n优点：静态全局变量不能被其它文件所用；其它文件中可以定义相同名字的变量，不会发生冲突。\n（1）全局变量和全局静态变量的区别\n\n1）全局变量是不显式用static修饰的全局变量，全局变量默认是有外部链接性的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern 全局变量名的声明，就可以使用全局变量。\n2）全局静态变量是显式用static修饰的全局变量，作用域是声明此变量所在的文件，其他的文件即使用extern声明也不能使用。\n### 静态局部变量有以下特点：\n（1）该变量在全局数据区分配内存；\n（2）静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用不再进行初始化；\n（3）静态局部变量一般在声明处初始化，如果没有显式初始化，会被程序自动初始化为0；\n（4）它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束。\n　　一般程序把新产生的动态数据存放在堆区，函数内部的自动变量存放在栈区。自动变量一般会随着函数的退出而释放空间，静态数据（即使是函数内部的静态局部变量）也存放在全局数据区。全局数据区的数据并不会因为函数的退出而释放空间。\n\n``` CPP\n\t#include <stdio.h>  \n\t#include <stdlib.h>  \n\tint k1 = 1;\n\tint k2; \n\tstatic int k3 = 2;\n\tstatic int k4; \n\t\n\tvoid hello_world(){\n\t\tprintf(\"hello world \\n\");\n\t}\n\t\n\tint main()\n\t{\n\t\tint k5 = 1;\n\t\tchar* k6; \n\t\tchar k7[10] = \"hello\";\n\t\tchar* k8 = \"hello\";\n\t\tconst char* k11 = \"hello\";\n\t\tchar* const k12 = \"hello\";                                                                           \n\t\tk6 = (char *)malloc(100);\n\t\tstatic int k9 = 2;\n\t\tstatic int k10;\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".Stack 栈地址从高向低\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"栈区-变量地址          k5：%p\\n\", &k5);\n\t\tprintf(\"栈区-变量地址          k6：%p\\n\", &k6);\n\t\tprintf(\"栈区-变量地址          k7：%p\\n\", &k7);\n\t\tprintf(\"栈区-变量地址          k8：%p\\n\", &k8);\n\t\tprintf(\"栈区-变量地址          k11：%p\\n\", &k11);\n\t\tprintf(\"栈区-变量地址          k12：%p\\n\", &k12);\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".Heap 堆地址从低往高\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"堆区地址-动态申请      k6：%p\\n\", k6);\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".BSS 未初始化全局和静态变量存储区\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"静态内部变量无初值    k10：%p\\n\", &k10);\n\t\tprintf(\"静态全局外部无初值     k4：%p\\n\", &k4);\n\t\tprintf(\"全局外部无初值         k2：%p\\n\", &k2);\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".DATA 已经初始化全局和静态变量存储区\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"静态内部变量有初值     k9：%p\\n\", &k9);\n\t\tprintf(\"静态全局外部有初值     k3：%p\\n\", &k3);\n\t\tprintf(\"全局外部有初值         k1：%p\\n\", &k1);\n\t\tprintf(\"文字常量地址           k8：%p, %s\\n\", k8, k8);\n\t\tprintf(\"文字常量地址          k11：%p, %s\\n\", k11, k11);\n\t\tprintf(\"文字常量地址          k12：%p, %s\\n\", k12, k12);\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".TEXT 代码段\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"程序区地址           main：%p\\n\", &main);\n\t\tprintf(\"程序区地址           func：%p\\n\", &hello_world);\n\t\tprintf(\"===========================================\\n\");\n\t\n\t\tfree(k6);\n\t\treturn 0;\n\t}\n```\n\n输出结果：\n<img src=\"static关键字/内存分布.png\"  width=\"60%\" height=\"60%\">\n\n### 特别的，在C++中：\nstatic关键字最基本的用法是：\n\n1、被static修饰的变量属于类变量，可以通过类名.变量名直接引用，而不需要new出一个类来\n\n2、被static修饰的方法属于类方法，可以通过类名.方法名直接引用，而不需要new出一个类来\n\n被static修饰的变量、被static修饰的方法统一属于类的静态资源，是类实例之间共享的，换言之，一处变、处处变。\n\n　　在C++中，静态成员是属于整个类的而不是某个对象，静态成员变量只存储一份供所有对象共用。所以在所有对象中都可以共享它。使用静态成员变量实现多个对象之间的数据共享不会破坏隐藏的原则，保证了安全性还可以节省内存。\n静态成员的定义或声明要加个关键static。静态成员可以通过双冒号来使用即<类名>::<静态成员名>。\n思考总结：静态资源属于类，但是是独立于类存在的。从J类的加载机制的角度讲，静态资源是类初始化的时候加载的，而非静态资源是类实例化对象的时候加载的。 类的初始化早于类实例化对象，比如Class.forName(“xxx”)方法，就是初始化了一个类，但是并没有实例化对象，只是加载这个类的静态资源罢 了。所以对于静态资源来说，它是不可能知道一个类中有哪些非静态资源的；但是对于非静态资源来说就不一样了，由于它是实例化对象出来之后产生的，因此属于类的这些东西它都能认识。所以上面的几个问题答案就很明确了：\n\n1）静态方法能不能引用非静态资源？不能，实例化对象的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它。\n\n2）静态方法里面能不能引用静态资源？可以，因为都是类初始化的时候加载的，大家相互都认识。\n\n3）非静态方法里面能不能引用静态资源？可以，非静态方法就是实例方法，那是实例化对象之后才产生的，那么属于类的内容它都认识。\n\n　　（static修饰类：这个用得相对比前面的用法少多了，static一般情况下来说是不可以修饰类的， 如果static要修饰一个类，说明这个类是一个静态内部类（注意static只能修饰一个内部类），也就是匿名内部类。像线程池 ThreadPoolExecutor中的四种拒绝机制CallerRunsPolicy、AbortPolicy、DiscardPolicy、 DiscardOldestPolicy就是静态内部类。静态内部类相关内容会在写内部类的时候专门讲到。）\n\n### 总结：\n（1）静态成员函数中不能调用非静态成员。\n\n（2）非静态成员函数中可以调用静态成员。因为静态成员属于类本身，在类的对象产生之前就已经存在了，所以在非静态成员函数中是可以调用静态成员的。\n\n（3）静态成员变量使用前必须先初始化(如int MyClass::m_nNumber = 0;)，否则会在linker时出错。\n\n参考：http://blog.csdn.net/morewindows/article/details/6721430\n\n 一般总结：在类中，static可以用来修饰静态数据成员和静态成员方法 \n静态数据成员 \n（1）静态数据成员可以实现多个对象之间的数据共享，它是类的所有对象的共享成员，它在内存中只占一份空间，如果改变它的值，则各对象中这个数据成员的值都被改变。 \n（2）静态数据成员是在程序开始运行时被分配空间，到程序结束之后才释放，只要类中指定了静态数据成员，即使不定义对象，也会为静态数据成员分配空间。 \n（3）静态数据成员可以被初始化，但是只能在类体外进行初始化，若未对静态数据成员赋初值，则编译器会自动为其初始化为0 \n（4）静态数据成员既可以通过对象名引用，也可以通过类名引用。\n\n静态成员函数 \n（1）静态成员函数和静态数据成员一样，他们都属于类的静态成员，而不是对象成员。 \n（2）非静态成员函数有this指针，而静态成员函数没有this指针。 \n（3）静态成员函数主要用来方位静态数据成员而不能访问非静态成员。\n\n## 简言之\n1. 修饰普通变量，修改变量的存储区域和生命周期，使变量存储在静态区，在 main函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。\n2. 修饰普通函数，表明函数的作用范围，仅在定义该函数的文件内才能使用。在多人开发项目时，为了防止与他人命令函数重名，可以将函数定位为 static。\n3. 修饰成员变量，修饰成员变量使所有的对象只保存一个该变量，而且不需要生成对象就可以访问该成员。\n4. 修饰成员函数，修饰成员函数使得不需要生成对象就可以访问该函数，但是在 static 函数内不能访问非静态成员","source":"_posts/static关键字.md","raw":"---\ntitle: static关键字\ndate: 2015-03-02 10:30:14\ncategories: 编程基础\ntags: [c++,static]\nphotos: \"2015/03/02/static关键字/top.png\"\n---\n## static关键字\n　　static 是C/C++中很常用的修饰符，它被用来控制变量的存储方式和可见性。\n\n### static的引入\n　　我们知道在函数内部定义的变量，当程序执行到它的定义处时，编译器为它在栈上分配空间，函数在栈上分配的空间在此函数执行结束时会释放掉，这样就产生了一个问题: 如果想将函数中此变量的值保存至下一次调用时，如何实现？ 最容易想到的方法是定义为全局的变量，但定义一个全局变量有许多缺点，最明显的缺点是破坏了此变量的访问范围（使得在此函数中定义的变量，不仅仅只受此函数控制）。static关键字则可以很好的解决这个问题。\n\n另外，在C++中，需要一个数据对象为整个类而非某个对象服务,同时又力求不破坏类的封装性,即要求此成员隐藏在类的内部，对外不可见时，可将其定义为静态数据。\n\n### 静态数据的存储\n　　全局（静态）存储区：分为DATA段和BSS段。DATA段（全局初始化区）存放初始化的全局变量和静态变量；BSS段（全局未初始化区）存放未初始化的全局变量和静态变量。程序运行结束时自动释放。其中BBS段在程序执行之前会被系统自动清0，所以未初始化的全局变量和静态变量在程序执行之前已经为0。存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。\n\n在C++中static的内部实现机制：静态数据成员要在程序一开始运行时就必须存在。因为函数在程序运行中被调用，所以静态数据成员不能在任何函数内分配空间和初始化。\n       这样，它的空间分配有三个可能的地方，一是作为类的外部接口的头文件，那里有类声明；二是类定义的内部实现，那里有类的成员函数定义；三是应用程序的main()函数前的全局数据声明和定义处。\n      静态数据成员要实际地分配空间，故不能在类的声明中定义（只能声明数据成员）。类声明只声明一个类的“尺寸和规格”，并不进行实际的内存分配，所以在类声明中写成定义是错误的。它也不能在头文件中类声明的外部定义，因为那会造成在多个使用该类的源文件中，对其重复定义。\n      static被引入以告知编译器，将变量存储在程序的静态存储区而非栈上空间，静态数据成员按定义出现的先后顺序依次初始化，注意静态成员嵌套时，要保证所嵌套的成员已经初始化了。消除时的顺序是初始化的反顺序。\n优势：可以节省内存，因为它是所有对象所公有的，因此，对多个对象来说，静态数据成员只存储一处，供所有对象共用。静态数据成员的值对每个对象都是一样，但它的值是可以更新的。只要对静态数据成员的值更新一次，保证所有对象存取更新后的相同的值，这样可以提高时间效率。\n\n## 在C/C++中static的作用\n### 总的来说：\n（1）在修饰变量的时候，static修饰的静态局部变量只执行初始化一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放。\n（2）static修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是extern外部声明也不可以。\n（3）static修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用。Static修饰的变量存放在全局数据区的静态变量区，包括全局静态变量和局部静态变量，都在全局数据区分配内存。初始化的时候自动初始化为0。\n（4）不想被释放的时候，可以使用static修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用static修饰。\n（5）考虑到数据安全性（当程序想要使用全局变量的时候应该先考虑使用static）。\n\n### 静态变量与普通变量\n静态全局变量有以下特点：\n（1）静态变量都在全局数据区分配内存，包括后面将要提到的静态局部变量;\n（2）未经初始化的静态全局变量会被程序自动初始化为0（在函数体内声明的自动变量的值是随机的，除非它被显式初始化，而在函数体外被声明的自动变量也会被初始化为0）；\n（3）静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的。\n优点：静态全局变量不能被其它文件所用；其它文件中可以定义相同名字的变量，不会发生冲突。\n（1）全局变量和全局静态变量的区别\n\n1）全局变量是不显式用static修饰的全局变量，全局变量默认是有外部链接性的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern 全局变量名的声明，就可以使用全局变量。\n2）全局静态变量是显式用static修饰的全局变量，作用域是声明此变量所在的文件，其他的文件即使用extern声明也不能使用。\n### 静态局部变量有以下特点：\n（1）该变量在全局数据区分配内存；\n（2）静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用不再进行初始化；\n（3）静态局部变量一般在声明处初始化，如果没有显式初始化，会被程序自动初始化为0；\n（4）它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束。\n　　一般程序把新产生的动态数据存放在堆区，函数内部的自动变量存放在栈区。自动变量一般会随着函数的退出而释放空间，静态数据（即使是函数内部的静态局部变量）也存放在全局数据区。全局数据区的数据并不会因为函数的退出而释放空间。\n\n``` CPP\n\t#include <stdio.h>  \n\t#include <stdlib.h>  \n\tint k1 = 1;\n\tint k2; \n\tstatic int k3 = 2;\n\tstatic int k4; \n\t\n\tvoid hello_world(){\n\t\tprintf(\"hello world \\n\");\n\t}\n\t\n\tint main()\n\t{\n\t\tint k5 = 1;\n\t\tchar* k6; \n\t\tchar k7[10] = \"hello\";\n\t\tchar* k8 = \"hello\";\n\t\tconst char* k11 = \"hello\";\n\t\tchar* const k12 = \"hello\";                                                                           \n\t\tk6 = (char *)malloc(100);\n\t\tstatic int k9 = 2;\n\t\tstatic int k10;\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".Stack 栈地址从高向低\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"栈区-变量地址          k5：%p\\n\", &k5);\n\t\tprintf(\"栈区-变量地址          k6：%p\\n\", &k6);\n\t\tprintf(\"栈区-变量地址          k7：%p\\n\", &k7);\n\t\tprintf(\"栈区-变量地址          k8：%p\\n\", &k8);\n\t\tprintf(\"栈区-变量地址          k11：%p\\n\", &k11);\n\t\tprintf(\"栈区-变量地址          k12：%p\\n\", &k12);\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".Heap 堆地址从低往高\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"堆区地址-动态申请      k6：%p\\n\", k6);\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".BSS 未初始化全局和静态变量存储区\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"静态内部变量无初值    k10：%p\\n\", &k10);\n\t\tprintf(\"静态全局外部无初值     k4：%p\\n\", &k4);\n\t\tprintf(\"全局外部无初值         k2：%p\\n\", &k2);\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".DATA 已经初始化全局和静态变量存储区\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"静态内部变量有初值     k9：%p\\n\", &k9);\n\t\tprintf(\"静态全局外部有初值     k3：%p\\n\", &k3);\n\t\tprintf(\"全局外部有初值         k1：%p\\n\", &k1);\n\t\tprintf(\"文字常量地址           k8：%p, %s\\n\", k8, k8);\n\t\tprintf(\"文字常量地址          k11：%p, %s\\n\", k11, k11);\n\t\tprintf(\"文字常量地址          k12：%p, %s\\n\", k12, k12);\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\".TEXT 代码段\\n\");\n\t\tprintf(\"===========================================\\n\");\n\t\tprintf(\"程序区地址           main：%p\\n\", &main);\n\t\tprintf(\"程序区地址           func：%p\\n\", &hello_world);\n\t\tprintf(\"===========================================\\n\");\n\t\n\t\tfree(k6);\n\t\treturn 0;\n\t}\n```\n\n输出结果：\n<img src=\"static关键字/内存分布.png\"  width=\"60%\" height=\"60%\">\n\n### 特别的，在C++中：\nstatic关键字最基本的用法是：\n\n1、被static修饰的变量属于类变量，可以通过类名.变量名直接引用，而不需要new出一个类来\n\n2、被static修饰的方法属于类方法，可以通过类名.方法名直接引用，而不需要new出一个类来\n\n被static修饰的变量、被static修饰的方法统一属于类的静态资源，是类实例之间共享的，换言之，一处变、处处变。\n\n　　在C++中，静态成员是属于整个类的而不是某个对象，静态成员变量只存储一份供所有对象共用。所以在所有对象中都可以共享它。使用静态成员变量实现多个对象之间的数据共享不会破坏隐藏的原则，保证了安全性还可以节省内存。\n静态成员的定义或声明要加个关键static。静态成员可以通过双冒号来使用即<类名>::<静态成员名>。\n思考总结：静态资源属于类，但是是独立于类存在的。从J类的加载机制的角度讲，静态资源是类初始化的时候加载的，而非静态资源是类实例化对象的时候加载的。 类的初始化早于类实例化对象，比如Class.forName(“xxx”)方法，就是初始化了一个类，但是并没有实例化对象，只是加载这个类的静态资源罢 了。所以对于静态资源来说，它是不可能知道一个类中有哪些非静态资源的；但是对于非静态资源来说就不一样了，由于它是实例化对象出来之后产生的，因此属于类的这些东西它都能认识。所以上面的几个问题答案就很明确了：\n\n1）静态方法能不能引用非静态资源？不能，实例化对象的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它。\n\n2）静态方法里面能不能引用静态资源？可以，因为都是类初始化的时候加载的，大家相互都认识。\n\n3）非静态方法里面能不能引用静态资源？可以，非静态方法就是实例方法，那是实例化对象之后才产生的，那么属于类的内容它都认识。\n\n　　（static修饰类：这个用得相对比前面的用法少多了，static一般情况下来说是不可以修饰类的， 如果static要修饰一个类，说明这个类是一个静态内部类（注意static只能修饰一个内部类），也就是匿名内部类。像线程池 ThreadPoolExecutor中的四种拒绝机制CallerRunsPolicy、AbortPolicy、DiscardPolicy、 DiscardOldestPolicy就是静态内部类。静态内部类相关内容会在写内部类的时候专门讲到。）\n\n### 总结：\n（1）静态成员函数中不能调用非静态成员。\n\n（2）非静态成员函数中可以调用静态成员。因为静态成员属于类本身，在类的对象产生之前就已经存在了，所以在非静态成员函数中是可以调用静态成员的。\n\n（3）静态成员变量使用前必须先初始化(如int MyClass::m_nNumber = 0;)，否则会在linker时出错。\n\n参考：http://blog.csdn.net/morewindows/article/details/6721430\n\n 一般总结：在类中，static可以用来修饰静态数据成员和静态成员方法 \n静态数据成员 \n（1）静态数据成员可以实现多个对象之间的数据共享，它是类的所有对象的共享成员，它在内存中只占一份空间，如果改变它的值，则各对象中这个数据成员的值都被改变。 \n（2）静态数据成员是在程序开始运行时被分配空间，到程序结束之后才释放，只要类中指定了静态数据成员，即使不定义对象，也会为静态数据成员分配空间。 \n（3）静态数据成员可以被初始化，但是只能在类体外进行初始化，若未对静态数据成员赋初值，则编译器会自动为其初始化为0 \n（4）静态数据成员既可以通过对象名引用，也可以通过类名引用。\n\n静态成员函数 \n（1）静态成员函数和静态数据成员一样，他们都属于类的静态成员，而不是对象成员。 \n（2）非静态成员函数有this指针，而静态成员函数没有this指针。 \n（3）静态成员函数主要用来方位静态数据成员而不能访问非静态成员。\n\n## 简言之\n1. 修饰普通变量，修改变量的存储区域和生命周期，使变量存储在静态区，在 main函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。\n2. 修饰普通函数，表明函数的作用范围，仅在定义该函数的文件内才能使用。在多人开发项目时，为了防止与他人命令函数重名，可以将函数定位为 static。\n3. 修饰成员变量，修饰成员变量使所有的对象只保存一个该变量，而且不需要生成对象就可以访问该成员。\n4. 修饰成员函数，修饰成员函数使得不需要生成对象就可以访问该函数，但是在 static 函数内不能访问非静态成员","slug":"static关键字","published":1,"updated":"2018-10-15T04:04:52.353Z","comments":1,"layout":"post","link":"","_id":"cjny09rg2000a40v7mu6jajvi","content":"<h2 id=\"static关键字\"><a href=\"#static关键字\" class=\"headerlink\" title=\"static关键字\"></a>static关键字</h2><p>　　static 是C/C++中很常用的修饰符，它被用来控制变量的存储方式和可见性。</p>\n<h3 id=\"static的引入\"><a href=\"#static的引入\" class=\"headerlink\" title=\"static的引入\"></a>static的引入</h3><p>　　我们知道在函数内部定义的变量，当程序执行到它的定义处时，编译器为它在栈上分配空间，函数在栈上分配的空间在此函数执行结束时会释放掉，这样就产生了一个问题: 如果想将函数中此变量的值保存至下一次调用时，如何实现？ 最容易想到的方法是定义为全局的变量，但定义一个全局变量有许多缺点，最明显的缺点是破坏了此变量的访问范围（使得在此函数中定义的变量，不仅仅只受此函数控制）。static关键字则可以很好的解决这个问题。</p>\n<p>另外，在C++中，需要一个数据对象为整个类而非某个对象服务,同时又力求不破坏类的封装性,即要求此成员隐藏在类的内部，对外不可见时，可将其定义为静态数据。</p>\n<h3 id=\"静态数据的存储\"><a href=\"#静态数据的存储\" class=\"headerlink\" title=\"静态数据的存储\"></a>静态数据的存储</h3><p>　　全局（静态）存储区：分为DATA段和BSS段。DATA段（全局初始化区）存放初始化的全局变量和静态变量；BSS段（全局未初始化区）存放未初始化的全局变量和静态变量。程序运行结束时自动释放。其中BBS段在程序执行之前会被系统自动清0，所以未初始化的全局变量和静态变量在程序执行之前已经为0。存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。</p>\n<p>在C++中static的内部实现机制：静态数据成员要在程序一开始运行时就必须存在。因为函数在程序运行中被调用，所以静态数据成员不能在任何函数内分配空间和初始化。<br>       这样，它的空间分配有三个可能的地方，一是作为类的外部接口的头文件，那里有类声明；二是类定义的内部实现，那里有类的成员函数定义；三是应用程序的main()函数前的全局数据声明和定义处。<br>      静态数据成员要实际地分配空间，故不能在类的声明中定义（只能声明数据成员）。类声明只声明一个类的“尺寸和规格”，并不进行实际的内存分配，所以在类声明中写成定义是错误的。它也不能在头文件中类声明的外部定义，因为那会造成在多个使用该类的源文件中，对其重复定义。<br>      static被引入以告知编译器，将变量存储在程序的静态存储区而非栈上空间，静态数据成员按定义出现的先后顺序依次初始化，注意静态成员嵌套时，要保证所嵌套的成员已经初始化了。消除时的顺序是初始化的反顺序。<br>优势：可以节省内存，因为它是所有对象所公有的，因此，对多个对象来说，静态数据成员只存储一处，供所有对象共用。静态数据成员的值对每个对象都是一样，但它的值是可以更新的。只要对静态数据成员的值更新一次，保证所有对象存取更新后的相同的值，这样可以提高时间效率。</p>\n<h2 id=\"在C-C-中static的作用\"><a href=\"#在C-C-中static的作用\" class=\"headerlink\" title=\"在C/C++中static的作用\"></a>在C/C++中static的作用</h2><h3 id=\"总的来说：\"><a href=\"#总的来说：\" class=\"headerlink\" title=\"总的来说：\"></a>总的来说：</h3><p>（1）在修饰变量的时候，static修饰的静态局部变量只执行初始化一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放。<br>（2）static修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是extern外部声明也不可以。<br>（3）static修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用。Static修饰的变量存放在全局数据区的静态变量区，包括全局静态变量和局部静态变量，都在全局数据区分配内存。初始化的时候自动初始化为0。<br>（4）不想被释放的时候，可以使用static修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用static修饰。<br>（5）考虑到数据安全性（当程序想要使用全局变量的时候应该先考虑使用static）。</p>\n<h3 id=\"静态变量与普通变量\"><a href=\"#静态变量与普通变量\" class=\"headerlink\" title=\"静态变量与普通变量\"></a>静态变量与普通变量</h3><p>静态全局变量有以下特点：<br>（1）静态变量都在全局数据区分配内存，包括后面将要提到的静态局部变量;<br>（2）未经初始化的静态全局变量会被程序自动初始化为0（在函数体内声明的自动变量的值是随机的，除非它被显式初始化，而在函数体外被声明的自动变量也会被初始化为0）；<br>（3）静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的。<br>优点：静态全局变量不能被其它文件所用；其它文件中可以定义相同名字的变量，不会发生冲突。<br>（1）全局变量和全局静态变量的区别</p>\n<p>1）全局变量是不显式用static修饰的全局变量，全局变量默认是有外部链接性的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern 全局变量名的声明，就可以使用全局变量。<br>2）全局静态变量是显式用static修饰的全局变量，作用域是声明此变量所在的文件，其他的文件即使用extern声明也不能使用。</p>\n<h3 id=\"静态局部变量有以下特点：\"><a href=\"#静态局部变量有以下特点：\" class=\"headerlink\" title=\"静态局部变量有以下特点：\"></a>静态局部变量有以下特点：</h3><p>（1）该变量在全局数据区分配内存；<br>（2）静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用不再进行初始化；<br>（3）静态局部变量一般在声明处初始化，如果没有显式初始化，会被程序自动初始化为0；<br>（4）它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束。<br>　　一般程序把新产生的动态数据存放在堆区，函数内部的自动变量存放在栈区。自动变量一般会随着函数的退出而释放空间，静态数据（即使是函数内部的静态局部变量）也存放在全局数据区。全局数据区的数据并不会因为函数的退出而释放空间。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> k1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> k2; </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k3 = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k4; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world \\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k5 = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* k6; </span><br><span class=\"line\">\t<span class=\"keyword\">char</span> k7[<span class=\"number\">10</span>] = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* k8 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* k11 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> k12 = <span class=\"string\">\"hello\"</span>;                                                                           </span><br><span class=\"line\">\tk6 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k9 = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k10;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".Stack 栈地址从高向低\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k5：%p\\n\"</span>, &amp;k5);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k6：%p\\n\"</span>, &amp;k6);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k7：%p\\n\"</span>, &amp;k7);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k8：%p\\n\"</span>, &amp;k8);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k11：%p\\n\"</span>, &amp;k11);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k12：%p\\n\"</span>, &amp;k12);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".Heap 堆地址从低往高\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"堆区地址-动态申请      k6：%p\\n\"</span>, k6);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".BSS 未初始化全局和静态变量存储区\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"静态内部变量无初值    k10：%p\\n\"</span>, &amp;k10);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"静态全局外部无初值     k4：%p\\n\"</span>, &amp;k4);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"全局外部无初值         k2：%p\\n\"</span>, &amp;k2);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".DATA 已经初始化全局和静态变量存储区\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"静态内部变量有初值     k9：%p\\n\"</span>, &amp;k9);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"静态全局外部有初值     k3：%p\\n\"</span>, &amp;k3);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"全局外部有初值         k1：%p\\n\"</span>, &amp;k1);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"文字常量地址           k8：%p, %s\\n\"</span>, k8, k8);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"文字常量地址          k11：%p, %s\\n\"</span>, k11, k11);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"文字常量地址          k12：%p, %s\\n\"</span>, k12, k12);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".TEXT 代码段\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"程序区地址           main：%p\\n\"</span>, &amp;main);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"程序区地址           func：%p\\n\"</span>, &amp;hello_world);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(k6);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：<br><img src=\"/2015/03/02/static关键字/内存分布.png\" width=\"60%\" height=\"60%\"></p>\n<h3 id=\"特别的，在C-中：\"><a href=\"#特别的，在C-中：\" class=\"headerlink\" title=\"特别的，在C++中：\"></a>特别的，在C++中：</h3><p>static关键字最基本的用法是：</p>\n<p>1、被static修饰的变量属于类变量，可以通过类名.变量名直接引用，而不需要new出一个类来</p>\n<p>2、被static修饰的方法属于类方法，可以通过类名.方法名直接引用，而不需要new出一个类来</p>\n<p>被static修饰的变量、被static修饰的方法统一属于类的静态资源，是类实例之间共享的，换言之，一处变、处处变。</p>\n<p>　　在C++中，静态成员是属于整个类的而不是某个对象，静态成员变量只存储一份供所有对象共用。所以在所有对象中都可以共享它。使用静态成员变量实现多个对象之间的数据共享不会破坏隐藏的原则，保证了安全性还可以节省内存。<br>静态成员的定义或声明要加个关键static。静态成员可以通过双冒号来使用即&lt;类名&gt;::&lt;静态成员名&gt;。<br>思考总结：静态资源属于类，但是是独立于类存在的。从J类的加载机制的角度讲，静态资源是类初始化的时候加载的，而非静态资源是类实例化对象的时候加载的。 类的初始化早于类实例化对象，比如Class.forName(“xxx”)方法，就是初始化了一个类，但是并没有实例化对象，只是加载这个类的静态资源罢 了。所以对于静态资源来说，它是不可能知道一个类中有哪些非静态资源的；但是对于非静态资源来说就不一样了，由于它是实例化对象出来之后产生的，因此属于类的这些东西它都能认识。所以上面的几个问题答案就很明确了：</p>\n<p>1）静态方法能不能引用非静态资源？不能，实例化对象的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它。</p>\n<p>2）静态方法里面能不能引用静态资源？可以，因为都是类初始化的时候加载的，大家相互都认识。</p>\n<p>3）非静态方法里面能不能引用静态资源？可以，非静态方法就是实例方法，那是实例化对象之后才产生的，那么属于类的内容它都认识。</p>\n<p>　　（static修饰类：这个用得相对比前面的用法少多了，static一般情况下来说是不可以修饰类的， 如果static要修饰一个类，说明这个类是一个静态内部类（注意static只能修饰一个内部类），也就是匿名内部类。像线程池 ThreadPoolExecutor中的四种拒绝机制CallerRunsPolicy、AbortPolicy、DiscardPolicy、 DiscardOldestPolicy就是静态内部类。静态内部类相关内容会在写内部类的时候专门讲到。）</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>（1）静态成员函数中不能调用非静态成员。</p>\n<p>（2）非静态成员函数中可以调用静态成员。因为静态成员属于类本身，在类的对象产生之前就已经存在了，所以在非静态成员函数中是可以调用静态成员的。</p>\n<p>（3）静态成员变量使用前必须先初始化(如int MyClass::m_nNumber = 0;)，否则会在linker时出错。</p>\n<p>参考：<a href=\"http://blog.csdn.net/morewindows/article/details/6721430\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/morewindows/article/details/6721430</a></p>\n<p> 一般总结：在类中，static可以用来修饰静态数据成员和静态成员方法<br>静态数据成员<br>（1）静态数据成员可以实现多个对象之间的数据共享，它是类的所有对象的共享成员，它在内存中只占一份空间，如果改变它的值，则各对象中这个数据成员的值都被改变。<br>（2）静态数据成员是在程序开始运行时被分配空间，到程序结束之后才释放，只要类中指定了静态数据成员，即使不定义对象，也会为静态数据成员分配空间。<br>（3）静态数据成员可以被初始化，但是只能在类体外进行初始化，若未对静态数据成员赋初值，则编译器会自动为其初始化为0<br>（4）静态数据成员既可以通过对象名引用，也可以通过类名引用。</p>\n<p>静态成员函数<br>（1）静态成员函数和静态数据成员一样，他们都属于类的静态成员，而不是对象成员。<br>（2）非静态成员函数有this指针，而静态成员函数没有this指针。<br>（3）静态成员函数主要用来方位静态数据成员而不能访问非静态成员。</p>\n<h2 id=\"简言之\"><a href=\"#简言之\" class=\"headerlink\" title=\"简言之\"></a>简言之</h2><ol>\n<li>修饰普通变量，修改变量的存储区域和生命周期，使变量存储在静态区，在 main函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。</li>\n<li>修饰普通函数，表明函数的作用范围，仅在定义该函数的文件内才能使用。在多人开发项目时，为了防止与他人命令函数重名，可以将函数定位为 static。</li>\n<li>修饰成员变量，修饰成员变量使所有的对象只保存一个该变量，而且不需要生成对象就可以访问该成员。</li>\n<li>修饰成员函数，修饰成员函数使得不需要生成对象就可以访问该函数，但是在 static 函数内不能访问非静态成员</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"static关键字\"><a href=\"#static关键字\" class=\"headerlink\" title=\"static关键字\"></a>static关键字</h2><p>　　static 是C/C++中很常用的修饰符，它被用来控制变量的存储方式和可见性。</p>\n<h3 id=\"static的引入\"><a href=\"#static的引入\" class=\"headerlink\" title=\"static的引入\"></a>static的引入</h3><p>　　我们知道在函数内部定义的变量，当程序执行到它的定义处时，编译器为它在栈上分配空间，函数在栈上分配的空间在此函数执行结束时会释放掉，这样就产生了一个问题: 如果想将函数中此变量的值保存至下一次调用时，如何实现？ 最容易想到的方法是定义为全局的变量，但定义一个全局变量有许多缺点，最明显的缺点是破坏了此变量的访问范围（使得在此函数中定义的变量，不仅仅只受此函数控制）。static关键字则可以很好的解决这个问题。</p>\n<p>另外，在C++中，需要一个数据对象为整个类而非某个对象服务,同时又力求不破坏类的封装性,即要求此成员隐藏在类的内部，对外不可见时，可将其定义为静态数据。</p>\n<h3 id=\"静态数据的存储\"><a href=\"#静态数据的存储\" class=\"headerlink\" title=\"静态数据的存储\"></a>静态数据的存储</h3><p>　　全局（静态）存储区：分为DATA段和BSS段。DATA段（全局初始化区）存放初始化的全局变量和静态变量；BSS段（全局未初始化区）存放未初始化的全局变量和静态变量。程序运行结束时自动释放。其中BBS段在程序执行之前会被系统自动清0，所以未初始化的全局变量和静态变量在程序执行之前已经为0。存储在静态数据区的变量会在程序刚开始运行时就完成初始化，也是唯一的一次初始化。</p>\n<p>在C++中static的内部实现机制：静态数据成员要在程序一开始运行时就必须存在。因为函数在程序运行中被调用，所以静态数据成员不能在任何函数内分配空间和初始化。<br>       这样，它的空间分配有三个可能的地方，一是作为类的外部接口的头文件，那里有类声明；二是类定义的内部实现，那里有类的成员函数定义；三是应用程序的main()函数前的全局数据声明和定义处。<br>      静态数据成员要实际地分配空间，故不能在类的声明中定义（只能声明数据成员）。类声明只声明一个类的“尺寸和规格”，并不进行实际的内存分配，所以在类声明中写成定义是错误的。它也不能在头文件中类声明的外部定义，因为那会造成在多个使用该类的源文件中，对其重复定义。<br>      static被引入以告知编译器，将变量存储在程序的静态存储区而非栈上空间，静态数据成员按定义出现的先后顺序依次初始化，注意静态成员嵌套时，要保证所嵌套的成员已经初始化了。消除时的顺序是初始化的反顺序。<br>优势：可以节省内存，因为它是所有对象所公有的，因此，对多个对象来说，静态数据成员只存储一处，供所有对象共用。静态数据成员的值对每个对象都是一样，但它的值是可以更新的。只要对静态数据成员的值更新一次，保证所有对象存取更新后的相同的值，这样可以提高时间效率。</p>\n<h2 id=\"在C-C-中static的作用\"><a href=\"#在C-C-中static的作用\" class=\"headerlink\" title=\"在C/C++中static的作用\"></a>在C/C++中static的作用</h2><h3 id=\"总的来说：\"><a href=\"#总的来说：\" class=\"headerlink\" title=\"总的来说：\"></a>总的来说：</h3><p>（1）在修饰变量的时候，static修饰的静态局部变量只执行初始化一次，而且延长了局部变量的生命周期，直到程序运行结束以后才释放。<br>（2）static修饰全局变量的时候，这个全局变量只能在本文件中访问，不能在其它文件中访问，即便是extern外部声明也不可以。<br>（3）static修饰一个函数，则这个函数的只能在本文件中调用，不能被其他文件调用。Static修饰的变量存放在全局数据区的静态变量区，包括全局静态变量和局部静态变量，都在全局数据区分配内存。初始化的时候自动初始化为0。<br>（4）不想被释放的时候，可以使用static修饰。比如修饰函数中存放在栈空间的数组。如果不想让这个数组在函数调用结束释放可以使用static修饰。<br>（5）考虑到数据安全性（当程序想要使用全局变量的时候应该先考虑使用static）。</p>\n<h3 id=\"静态变量与普通变量\"><a href=\"#静态变量与普通变量\" class=\"headerlink\" title=\"静态变量与普通变量\"></a>静态变量与普通变量</h3><p>静态全局变量有以下特点：<br>（1）静态变量都在全局数据区分配内存，包括后面将要提到的静态局部变量;<br>（2）未经初始化的静态全局变量会被程序自动初始化为0（在函数体内声明的自动变量的值是随机的，除非它被显式初始化，而在函数体外被声明的自动变量也会被初始化为0）；<br>（3）静态全局变量在声明它的整个文件都是可见的，而在文件之外是不可见的。<br>优点：静态全局变量不能被其它文件所用；其它文件中可以定义相同名字的变量，不会发生冲突。<br>（1）全局变量和全局静态变量的区别</p>\n<p>1）全局变量是不显式用static修饰的全局变量，全局变量默认是有外部链接性的，作用域是整个工程，在一个文件内定义的全局变量，在另一个文件中，通过extern 全局变量名的声明，就可以使用全局变量。<br>2）全局静态变量是显式用static修饰的全局变量，作用域是声明此变量所在的文件，其他的文件即使用extern声明也不能使用。</p>\n<h3 id=\"静态局部变量有以下特点：\"><a href=\"#静态局部变量有以下特点：\" class=\"headerlink\" title=\"静态局部变量有以下特点：\"></a>静态局部变量有以下特点：</h3><p>（1）该变量在全局数据区分配内存；<br>（2）静态局部变量在程序执行到该对象的声明处时被首次初始化，即以后的函数调用不再进行初始化；<br>（3）静态局部变量一般在声明处初始化，如果没有显式初始化，会被程序自动初始化为0；<br>（4）它始终驻留在全局数据区，直到程序运行结束。但其作用域为局部作用域，当定义它的函数或语句块结束时，其作用域随之结束。<br>　　一般程序把新产生的动态数据存放在堆区，函数内部的自动变量存放在栈区。自动变量一般会随着函数的退出而释放空间，静态数据（即使是函数内部的静态局部变量）也存放在全局数据区。全局数据区的数据并不会因为函数的退出而释放空间。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdlib.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"keyword\">int</span> k1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> k2; </span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k3 = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k4; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">hello_world</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world \\n\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> k5 = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* k6; </span><br><span class=\"line\">\t<span class=\"keyword\">char</span> k7[<span class=\"number\">10</span>] = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* k8 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* k11 = <span class=\"string\">\"hello\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* <span class=\"keyword\">const</span> k12 = <span class=\"string\">\"hello\"</span>;                                                                           </span><br><span class=\"line\">\tk6 = (<span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k9 = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> k10;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".Stack 栈地址从高向低\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k5：%p\\n\"</span>, &amp;k5);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k6：%p\\n\"</span>, &amp;k6);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k7：%p\\n\"</span>, &amp;k7);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k8：%p\\n\"</span>, &amp;k8);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k11：%p\\n\"</span>, &amp;k11);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"栈区-变量地址          k12：%p\\n\"</span>, &amp;k12);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".Heap 堆地址从低往高\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"堆区地址-动态申请      k6：%p\\n\"</span>, k6);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".BSS 未初始化全局和静态变量存储区\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"静态内部变量无初值    k10：%p\\n\"</span>, &amp;k10);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"静态全局外部无初值     k4：%p\\n\"</span>, &amp;k4);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"全局外部无初值         k2：%p\\n\"</span>, &amp;k2);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".DATA 已经初始化全局和静态变量存储区\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"静态内部变量有初值     k9：%p\\n\"</span>, &amp;k9);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"静态全局外部有初值     k3：%p\\n\"</span>, &amp;k3);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"全局外部有初值         k1：%p\\n\"</span>, &amp;k1);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"文字常量地址           k8：%p, %s\\n\"</span>, k8, k8);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"文字常量地址          k11：%p, %s\\n\"</span>, k11, k11);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"文字常量地址          k12：%p, %s\\n\"</span>, k12, k12);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\".TEXT 代码段\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"程序区地址           main：%p\\n\"</span>, &amp;main);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"程序区地址           func：%p\\n\"</span>, &amp;hello_world);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"===========================================\\n\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(k6);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出结果：<br><img src=\"/2015/03/02/static关键字/内存分布.png\" width=\"60%\" height=\"60%\"></p>\n<h3 id=\"特别的，在C-中：\"><a href=\"#特别的，在C-中：\" class=\"headerlink\" title=\"特别的，在C++中：\"></a>特别的，在C++中：</h3><p>static关键字最基本的用法是：</p>\n<p>1、被static修饰的变量属于类变量，可以通过类名.变量名直接引用，而不需要new出一个类来</p>\n<p>2、被static修饰的方法属于类方法，可以通过类名.方法名直接引用，而不需要new出一个类来</p>\n<p>被static修饰的变量、被static修饰的方法统一属于类的静态资源，是类实例之间共享的，换言之，一处变、处处变。</p>\n<p>　　在C++中，静态成员是属于整个类的而不是某个对象，静态成员变量只存储一份供所有对象共用。所以在所有对象中都可以共享它。使用静态成员变量实现多个对象之间的数据共享不会破坏隐藏的原则，保证了安全性还可以节省内存。<br>静态成员的定义或声明要加个关键static。静态成员可以通过双冒号来使用即&lt;类名&gt;::&lt;静态成员名&gt;。<br>思考总结：静态资源属于类，但是是独立于类存在的。从J类的加载机制的角度讲，静态资源是类初始化的时候加载的，而非静态资源是类实例化对象的时候加载的。 类的初始化早于类实例化对象，比如Class.forName(“xxx”)方法，就是初始化了一个类，但是并没有实例化对象，只是加载这个类的静态资源罢 了。所以对于静态资源来说，它是不可能知道一个类中有哪些非静态资源的；但是对于非静态资源来说就不一样了，由于它是实例化对象出来之后产生的，因此属于类的这些东西它都能认识。所以上面的几个问题答案就很明确了：</p>\n<p>1）静态方法能不能引用非静态资源？不能，实例化对象的时候才会产生的东西，对于初始化后就存在的静态资源来说，根本不认识它。</p>\n<p>2）静态方法里面能不能引用静态资源？可以，因为都是类初始化的时候加载的，大家相互都认识。</p>\n<p>3）非静态方法里面能不能引用静态资源？可以，非静态方法就是实例方法，那是实例化对象之后才产生的，那么属于类的内容它都认识。</p>\n<p>　　（static修饰类：这个用得相对比前面的用法少多了，static一般情况下来说是不可以修饰类的， 如果static要修饰一个类，说明这个类是一个静态内部类（注意static只能修饰一个内部类），也就是匿名内部类。像线程池 ThreadPoolExecutor中的四种拒绝机制CallerRunsPolicy、AbortPolicy、DiscardPolicy、 DiscardOldestPolicy就是静态内部类。静态内部类相关内容会在写内部类的时候专门讲到。）</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>（1）静态成员函数中不能调用非静态成员。</p>\n<p>（2）非静态成员函数中可以调用静态成员。因为静态成员属于类本身，在类的对象产生之前就已经存在了，所以在非静态成员函数中是可以调用静态成员的。</p>\n<p>（3）静态成员变量使用前必须先初始化(如int MyClass::m_nNumber = 0;)，否则会在linker时出错。</p>\n<p>参考：<a href=\"http://blog.csdn.net/morewindows/article/details/6721430\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/morewindows/article/details/6721430</a></p>\n<p> 一般总结：在类中，static可以用来修饰静态数据成员和静态成员方法<br>静态数据成员<br>（1）静态数据成员可以实现多个对象之间的数据共享，它是类的所有对象的共享成员，它在内存中只占一份空间，如果改变它的值，则各对象中这个数据成员的值都被改变。<br>（2）静态数据成员是在程序开始运行时被分配空间，到程序结束之后才释放，只要类中指定了静态数据成员，即使不定义对象，也会为静态数据成员分配空间。<br>（3）静态数据成员可以被初始化，但是只能在类体外进行初始化，若未对静态数据成员赋初值，则编译器会自动为其初始化为0<br>（4）静态数据成员既可以通过对象名引用，也可以通过类名引用。</p>\n<p>静态成员函数<br>（1）静态成员函数和静态数据成员一样，他们都属于类的静态成员，而不是对象成员。<br>（2）非静态成员函数有this指针，而静态成员函数没有this指针。<br>（3）静态成员函数主要用来方位静态数据成员而不能访问非静态成员。</p>\n<h2 id=\"简言之\"><a href=\"#简言之\" class=\"headerlink\" title=\"简言之\"></a>简言之</h2><ol>\n<li>修饰普通变量，修改变量的存储区域和生命周期，使变量存储在静态区，在 main函数运行前就分配了空间，如果有初始值就用初始值初始化它，如果没有初始值系统用默认值初始化它。</li>\n<li>修饰普通函数，表明函数的作用范围，仅在定义该函数的文件内才能使用。在多人开发项目时，为了防止与他人命令函数重名，可以将函数定位为 static。</li>\n<li>修饰成员变量，修饰成员变量使所有的对象只保存一个该变量，而且不需要生成对象就可以访问该成员。</li>\n<li>修饰成员函数，修饰成员函数使得不需要生成对象就可以访问该函数，但是在 static 函数内不能访问非静态成员</li>\n</ol>\n"},{"title":"perf简单使用","date":"2015-01-20T11:24:36.000Z","_content":"Perf 是用来进行软件性能分析的工具，非常强大的工具。\n最初，perf叫做 Performance counter，在 2.6.31 内核中发布。在 2.6.32 中正式改名为 Performance Event，因为 perf 已不再仅仅作为 PMU 的抽象，而是能够处理所有的性能相关的事件。\nperf能够分析程序运行期间发生的硬件事件，比如 instructions retired ，processor clock cycles ，多级cache的hit和miss，分支指令预测的错误率；也可以分析软件事件，比如 Page Fault 和进程切换。\n而且，perf是随着内核一起发布的，就是说你装了linux就有了perf，使用起来也非常简单。\n1.perf list                             #列出当前所支持的事件，不同平台有所差异\n2.perf stat  ./a.out                #分析a.out，列出默认事件的信息\n3.perf stat -e event  ./a.out  #选定事件分析a.out\n4.perf top                             #类似于top\n5.perf record -e event          #粒度更细，函数级别分析\n6.perf report                         #和perf report一起使用","source":"_posts/perf简单使用.md","raw":"---\ntitle: perf简单使用\ndate: 2015-01-20 19:24:36\ncategories: 工具\ntags: 工具\n---\nPerf 是用来进行软件性能分析的工具，非常强大的工具。\n最初，perf叫做 Performance counter，在 2.6.31 内核中发布。在 2.6.32 中正式改名为 Performance Event，因为 perf 已不再仅仅作为 PMU 的抽象，而是能够处理所有的性能相关的事件。\nperf能够分析程序运行期间发生的硬件事件，比如 instructions retired ，processor clock cycles ，多级cache的hit和miss，分支指令预测的错误率；也可以分析软件事件，比如 Page Fault 和进程切换。\n而且，perf是随着内核一起发布的，就是说你装了linux就有了perf，使用起来也非常简单。\n1.perf list                             #列出当前所支持的事件，不同平台有所差异\n2.perf stat  ./a.out                #分析a.out，列出默认事件的信息\n3.perf stat -e event  ./a.out  #选定事件分析a.out\n4.perf top                             #类似于top\n5.perf record -e event          #粒度更细，函数级别分析\n6.perf report                         #和perf report一起使用","slug":"perf简单使用","published":1,"updated":"2018-10-15T02:24:08.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny09rg5000d40v7waye554v","content":"<p>Perf 是用来进行软件性能分析的工具，非常强大的工具。<br>最初，perf叫做 Performance counter，在 2.6.31 内核中发布。在 2.6.32 中正式改名为 Performance Event，因为 perf 已不再仅仅作为 PMU 的抽象，而是能够处理所有的性能相关的事件。<br>perf能够分析程序运行期间发生的硬件事件，比如 instructions retired ，processor clock cycles ，多级cache的hit和miss，分支指令预测的错误率；也可以分析软件事件，比如 Page Fault 和进程切换。<br>而且，perf是随着内核一起发布的，就是说你装了linux就有了perf，使用起来也非常简单。<br>1.perf list                             #列出当前所支持的事件，不同平台有所差异<br>2.perf stat  ./a.out                #分析a.out，列出默认事件的信息<br>3.perf stat -e event  ./a.out  #选定事件分析a.out<br>4.perf top                             #类似于top<br>5.perf record -e event          #粒度更细，函数级别分析<br>6.perf report                         #和perf report一起使用</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Perf 是用来进行软件性能分析的工具，非常强大的工具。<br>最初，perf叫做 Performance counter，在 2.6.31 内核中发布。在 2.6.32 中正式改名为 Performance Event，因为 perf 已不再仅仅作为 PMU 的抽象，而是能够处理所有的性能相关的事件。<br>perf能够分析程序运行期间发生的硬件事件，比如 instructions retired ，processor clock cycles ，多级cache的hit和miss，分支指令预测的错误率；也可以分析软件事件，比如 Page Fault 和进程切换。<br>而且，perf是随着内核一起发布的，就是说你装了linux就有了perf，使用起来也非常简单。<br>1.perf list                             #列出当前所支持的事件，不同平台有所差异<br>2.perf stat  ./a.out                #分析a.out，列出默认事件的信息<br>3.perf stat -e event  ./a.out  #选定事件分析a.out<br>4.perf top                             #类似于top<br>5.perf record -e event          #粒度更细，函数级别分析<br>6.perf report                         #和perf report一起使用</p>\n"},{"title":"mysql索引","date":"2015-01-23T09:25:49.000Z","photos":["2015/01/23/mysql索引/top.png"],"_content":"\n## 索引是什么\n\n索引是为了加速对表中数据行的检索而创建的一种分散的存储结构。\n索引存储着数据库数据在磁盘上的物理地址，查询时利用索引可以加快执行速度，尤其是数据量比较大时，索引的效果非常明显。\n一个非常恰当的比喻就是书的目录页与书的正文内容之间的关系，为了方便查找书中的内容，通过对内容建立索引形成目录。因此，要明白的一点就是，索引它也是一个文件，它是要占据物理空间的，而且占用的空间还不小，针对多个维度建立索引并且数据量还比较大，那么索引占用的物理空间和数据空间差不多。\n索引文件：\n1.对于innodb引擎来说\n* .frm后缀的文件存储的是表结构；\n* .ibd后缀的文件存放索引文件和数据。\n2.对于myisam引擎来说\n- .frm后缀的文件存储的是表结构；\n- .myd后缀的文件存储的是表数据；\n- .myi后缀的文件存储的就是索引文件。\n\n## 查看索引\n\nshow index from tblname;或者show keys from tblname;\n\n 字段名      : 含义                                                                 \n       Table : 表的名称                                                            \n  Non_unique : 如果索引不能包括重复词，则为0。如果可以，则为1                      \n    Key_name : 索引的名字                                                          \nSeq_in_index : 索引中的列序列号，从1开始，比如联合索引会涉及多个列                 \n Column_name : 列名称                                                              \n   Collation : 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）\n Cardinality : 索引中唯一值的数目的估计值。                                        \n    Sub_part : 如果列只是被部分地编入索引，则为被编入索引的字符的数目。否则为NULL  \n      Packed : 指示关键字如何被压缩。如果没有被压缩，则为NULL                      \n        Null : 如果列含有NULL，则含有YES。如果没有，则该列含有NO                   \n  Index_type : 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）                      \n     Comment : 注释                                                                \n\n\n## 索引的数据结构","source":"_posts/mysql索引.md","raw":"---\ntitle: mysql索引\ndate: 2015-01-23 17:25:49\ncategories: 数据库\ntags: [数据库，索引]\nphotos: \"2015/01/23/mysql索引/top.png\"\n---\n\n## 索引是什么\n\n索引是为了加速对表中数据行的检索而创建的一种分散的存储结构。\n索引存储着数据库数据在磁盘上的物理地址，查询时利用索引可以加快执行速度，尤其是数据量比较大时，索引的效果非常明显。\n一个非常恰当的比喻就是书的目录页与书的正文内容之间的关系，为了方便查找书中的内容，通过对内容建立索引形成目录。因此，要明白的一点就是，索引它也是一个文件，它是要占据物理空间的，而且占用的空间还不小，针对多个维度建立索引并且数据量还比较大，那么索引占用的物理空间和数据空间差不多。\n索引文件：\n1.对于innodb引擎来说\n* .frm后缀的文件存储的是表结构；\n* .ibd后缀的文件存放索引文件和数据。\n2.对于myisam引擎来说\n- .frm后缀的文件存储的是表结构；\n- .myd后缀的文件存储的是表数据；\n- .myi后缀的文件存储的就是索引文件。\n\n## 查看索引\n\nshow index from tblname;或者show keys from tblname;\n\n 字段名      : 含义                                                                 \n       Table : 表的名称                                                            \n  Non_unique : 如果索引不能包括重复词，则为0。如果可以，则为1                      \n    Key_name : 索引的名字                                                          \nSeq_in_index : 索引中的列序列号，从1开始，比如联合索引会涉及多个列                 \n Column_name : 列名称                                                              \n   Collation : 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）\n Cardinality : 索引中唯一值的数目的估计值。                                        \n    Sub_part : 如果列只是被部分地编入索引，则为被编入索引的字符的数目。否则为NULL  \n      Packed : 指示关键字如何被压缩。如果没有被压缩，则为NULL                      \n        Null : 如果列含有NULL，则含有YES。如果没有，则该列含有NO                   \n  Index_type : 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）                      \n     Comment : 注释                                                                \n\n\n## 索引的数据结构","slug":"mysql索引","published":1,"updated":"2018-10-15T02:43:44.272Z","comments":1,"layout":"post","link":"","_id":"cjny09rg6000e40v7bphsxiuf","content":"<h2 id=\"索引是什么\"><a href=\"#索引是什么\" class=\"headerlink\" title=\"索引是什么\"></a>索引是什么</h2><p>索引是为了加速对表中数据行的检索而创建的一种分散的存储结构。<br>索引存储着数据库数据在磁盘上的物理地址，查询时利用索引可以加快执行速度，尤其是数据量比较大时，索引的效果非常明显。<br>一个非常恰当的比喻就是书的目录页与书的正文内容之间的关系，为了方便查找书中的内容，通过对内容建立索引形成目录。因此，要明白的一点就是，索引它也是一个文件，它是要占据物理空间的，而且占用的空间还不小，针对多个维度建立索引并且数据量还比较大，那么索引占用的物理空间和数据空间差不多。<br>索引文件：<br>1.对于innodb引擎来说</p>\n<ul>\n<li>.frm后缀的文件存储的是表结构；</li>\n<li>.ibd后缀的文件存放索引文件和数据。<br>2.对于myisam引擎来说</li>\n</ul>\n<ul>\n<li>.frm后缀的文件存储的是表结构；</li>\n<li>.myd后缀的文件存储的是表数据；</li>\n<li>.myi后缀的文件存储的就是索引文件。</li>\n</ul>\n<h2 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h2><p>show index from tblname;或者show keys from tblname;</p>\n<p> 字段名      : 含义<br>       Table : 表的名称<br>  Non_unique : 如果索引不能包括重复词，则为0。如果可以，则为1<br>    Key_name : 索引的名字<br>Seq_in_index : 索引中的列序列号，从1开始，比如联合索引会涉及多个列<br> Column_name : 列名称<br>   Collation : 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）<br> Cardinality : 索引中唯一值的数目的估计值。<br>    Sub_part : 如果列只是被部分地编入索引，则为被编入索引的字符的数目。否则为NULL<br>      Packed : 指示关键字如何被压缩。如果没有被压缩，则为NULL<br>        Null : 如果列含有NULL，则含有YES。如果没有，则该列含有NO<br>  Index_type : 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）<br>     Comment : 注释                                                                </p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"索引是什么\"><a href=\"#索引是什么\" class=\"headerlink\" title=\"索引是什么\"></a>索引是什么</h2><p>索引是为了加速对表中数据行的检索而创建的一种分散的存储结构。<br>索引存储着数据库数据在磁盘上的物理地址，查询时利用索引可以加快执行速度，尤其是数据量比较大时，索引的效果非常明显。<br>一个非常恰当的比喻就是书的目录页与书的正文内容之间的关系，为了方便查找书中的内容，通过对内容建立索引形成目录。因此，要明白的一点就是，索引它也是一个文件，它是要占据物理空间的，而且占用的空间还不小，针对多个维度建立索引并且数据量还比较大，那么索引占用的物理空间和数据空间差不多。<br>索引文件：<br>1.对于innodb引擎来说</p>\n<ul>\n<li>.frm后缀的文件存储的是表结构；</li>\n<li>.ibd后缀的文件存放索引文件和数据。<br>2.对于myisam引擎来说</li>\n</ul>\n<ul>\n<li>.frm后缀的文件存储的是表结构；</li>\n<li>.myd后缀的文件存储的是表数据；</li>\n<li>.myi后缀的文件存储的就是索引文件。</li>\n</ul>\n<h2 id=\"查看索引\"><a href=\"#查看索引\" class=\"headerlink\" title=\"查看索引\"></a>查看索引</h2><p>show index from tblname;或者show keys from tblname;</p>\n<p> 字段名      : 含义<br>       Table : 表的名称<br>  Non_unique : 如果索引不能包括重复词，则为0。如果可以，则为1<br>    Key_name : 索引的名字<br>Seq_in_index : 索引中的列序列号，从1开始，比如联合索引会涉及多个列<br> Column_name : 列名称<br>   Collation : 列以什么方式存储在索引中。在MySQL中，有值‘A’（升序）或NULL（无分类）<br> Cardinality : 索引中唯一值的数目的估计值。<br>    Sub_part : 如果列只是被部分地编入索引，则为被编入索引的字符的数目。否则为NULL<br>      Packed : 指示关键字如何被压缩。如果没有被压缩，则为NULL<br>        Null : 如果列含有NULL，则含有YES。如果没有，则该列含有NO<br>  Index_type : 用过的索引方法（BTREE, FULLTEXT, HASH, RTREE）<br>     Comment : 注释                                                                </p>\n<h2 id=\"索引的数据结构\"><a href=\"#索引的数据结构\" class=\"headerlink\" title=\"索引的数据结构\"></a>索引的数据结构</h2>"},{"title":"头文件重复引用","date":"2015-03-01T03:45:06.000Z","photos":["2015/03/01/头文件重复引用/top.jpg"],"_content":"一般情况下为了解决头文件重复包含的问题，有两种解决方法：条件编译和#pragma once；\n但是这种只能解决程序编译时的变量重复定义问题。在这里我们要注意一点，变量，函数，类，结构体的重复定义不仅会发生在源程序编译的时候，在目标程序链接的时候同样也有可能发生。我们知道c/c++编译的基本单元是.c或.cpp文件，各个基本单元的编译是相互独立的，#ifndef等条件编译只能保证在一个基本单元（单独的.c或.cpp文件）中头文件不会被重复编译，但是无法保证两个或者更多基本单元中相同的头文件不会被重复编译。\n### 一个小问题\n在a.h中试图定义一个全局变量A，并且在a.cpp中进行了初始化；\nb.cpp中包含了a.h,并且试图使用全局变量A；\n即使在两个源文件中都添加了#pragma once，两个源文件编译可以正常进行，但是链接的时候依然会提示变量A重复定义；\n### 尝试解决\n在a.h头文件中将变量A加上static限制。确实可以正常编译链接了，但是b.cpp中访问变量A的值是空的。\n分析：static具有隐藏变量全局属性的作用，使得变量仅对当前文件可见。所以加上了static关键字后，A变量相当于在a.cpp和b.cpp分别存在一块内存。所以在a.cpp中操作A的值并不会影响b.cpp中的变量值。\n### 解决方案\n目标是b.cpp和a.cpp能共享全局变量A，所以在a.cpp中定义全局变量A，在a.h头文件中extern声明一下A，然后在b.cpp中通过引用a.h就可以直接使用变量A了。","source":"_posts/头文件重复引用.md","raw":"---\ntitle: 头文件重复引用\ndate: 2015-03-01 11:45:06\ncategories: 编程基础\ntags: [头文件,static,extern]\nphotos: \"2015/03/01/头文件重复引用/top.jpg\"\n---\n一般情况下为了解决头文件重复包含的问题，有两种解决方法：条件编译和#pragma once；\n但是这种只能解决程序编译时的变量重复定义问题。在这里我们要注意一点，变量，函数，类，结构体的重复定义不仅会发生在源程序编译的时候，在目标程序链接的时候同样也有可能发生。我们知道c/c++编译的基本单元是.c或.cpp文件，各个基本单元的编译是相互独立的，#ifndef等条件编译只能保证在一个基本单元（单独的.c或.cpp文件）中头文件不会被重复编译，但是无法保证两个或者更多基本单元中相同的头文件不会被重复编译。\n### 一个小问题\n在a.h中试图定义一个全局变量A，并且在a.cpp中进行了初始化；\nb.cpp中包含了a.h,并且试图使用全局变量A；\n即使在两个源文件中都添加了#pragma once，两个源文件编译可以正常进行，但是链接的时候依然会提示变量A重复定义；\n### 尝试解决\n在a.h头文件中将变量A加上static限制。确实可以正常编译链接了，但是b.cpp中访问变量A的值是空的。\n分析：static具有隐藏变量全局属性的作用，使得变量仅对当前文件可见。所以加上了static关键字后，A变量相当于在a.cpp和b.cpp分别存在一块内存。所以在a.cpp中操作A的值并不会影响b.cpp中的变量值。\n### 解决方案\n目标是b.cpp和a.cpp能共享全局变量A，所以在a.cpp中定义全局变量A，在a.h头文件中extern声明一下A，然后在b.cpp中通过引用a.h就可以直接使用变量A了。","slug":"头文件重复引用","published":1,"updated":"2018-10-15T02:26:19.230Z","comments":1,"layout":"post","link":"","_id":"cjny09rga000i40v7kt9od23l","content":"<p>一般情况下为了解决头文件重复包含的问题，有两种解决方法：条件编译和#pragma once；<br>但是这种只能解决程序编译时的变量重复定义问题。在这里我们要注意一点，变量，函数，类，结构体的重复定义不仅会发生在源程序编译的时候，在目标程序链接的时候同样也有可能发生。我们知道c/c++编译的基本单元是.c或.cpp文件，各个基本单元的编译是相互独立的，#ifndef等条件编译只能保证在一个基本单元（单独的.c或.cpp文件）中头文件不会被重复编译，但是无法保证两个或者更多基本单元中相同的头文件不会被重复编译。</p>\n<h3 id=\"一个小问题\"><a href=\"#一个小问题\" class=\"headerlink\" title=\"一个小问题\"></a>一个小问题</h3><p>在a.h中试图定义一个全局变量A，并且在a.cpp中进行了初始化；<br>b.cpp中包含了a.h,并且试图使用全局变量A；<br>即使在两个源文件中都添加了#pragma once，两个源文件编译可以正常进行，但是链接的时候依然会提示变量A重复定义；</p>\n<h3 id=\"尝试解决\"><a href=\"#尝试解决\" class=\"headerlink\" title=\"尝试解决\"></a>尝试解决</h3><p>在a.h头文件中将变量A加上static限制。确实可以正常编译链接了，但是b.cpp中访问变量A的值是空的。<br>分析：static具有隐藏变量全局属性的作用，使得变量仅对当前文件可见。所以加上了static关键字后，A变量相当于在a.cpp和b.cpp分别存在一块内存。所以在a.cpp中操作A的值并不会影响b.cpp中的变量值。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>目标是b.cpp和a.cpp能共享全局变量A，所以在a.cpp中定义全局变量A，在a.h头文件中extern声明一下A，然后在b.cpp中通过引用a.h就可以直接使用变量A了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>一般情况下为了解决头文件重复包含的问题，有两种解决方法：条件编译和#pragma once；<br>但是这种只能解决程序编译时的变量重复定义问题。在这里我们要注意一点，变量，函数，类，结构体的重复定义不仅会发生在源程序编译的时候，在目标程序链接的时候同样也有可能发生。我们知道c/c++编译的基本单元是.c或.cpp文件，各个基本单元的编译是相互独立的，#ifndef等条件编译只能保证在一个基本单元（单独的.c或.cpp文件）中头文件不会被重复编译，但是无法保证两个或者更多基本单元中相同的头文件不会被重复编译。</p>\n<h3 id=\"一个小问题\"><a href=\"#一个小问题\" class=\"headerlink\" title=\"一个小问题\"></a>一个小问题</h3><p>在a.h中试图定义一个全局变量A，并且在a.cpp中进行了初始化；<br>b.cpp中包含了a.h,并且试图使用全局变量A；<br>即使在两个源文件中都添加了#pragma once，两个源文件编译可以正常进行，但是链接的时候依然会提示变量A重复定义；</p>\n<h3 id=\"尝试解决\"><a href=\"#尝试解决\" class=\"headerlink\" title=\"尝试解决\"></a>尝试解决</h3><p>在a.h头文件中将变量A加上static限制。确实可以正常编译链接了，但是b.cpp中访问变量A的值是空的。<br>分析：static具有隐藏变量全局属性的作用，使得变量仅对当前文件可见。所以加上了static关键字后，A变量相当于在a.cpp和b.cpp分别存在一块内存。所以在a.cpp中操作A的值并不会影响b.cpp中的变量值。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>目标是b.cpp和a.cpp能共享全局变量A，所以在a.cpp中定义全局变量A，在a.h头文件中extern声明一下A，然后在b.cpp中通过引用a.h就可以直接使用变量A了。</p>\n"},{"title":"事务隔离级别","date":"2015-01-22T11:18:25.000Z","_content":"\ndirty read（脏读）：一个事务B中修改了一些数据但没有提交，而事务A却读取该数据并在其基础上进行操作，如果事务B进行回滚，那么事务A读到的数据是无效的，不符合数据一致性。\n\nunrepeatable read（不可重复读）：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。事务A在执行过程中读到了另一个事务B中已经修改并提交的数据，这不符合隔离性。例如：事务A开始时，读取事务B中数据a为10，在A结束时，又读一次a，发现变为20。\n\nphantom read（幻读）： 第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。事务A读取到了事务B新增的数据，也是不符合隔离性的。\n\n四种不同的事务隔离级别：\n\nRU(READ UNCOMMITTED)，读未提交：一个事务可以去读取其他事务未提交的变更，这种隔离级别允许脏读发生。在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。\n\nRC(READ COMMITTED)，读已提交：一个事务可以去读取其他事务提交的变更，这种隔离级别允许不可重复读、幻读的发生。（ORACAL默认的隔离级别） 这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果\n\nRR(REPEATABLE READ)，可重复读：一个事务中，直到事务结束前，都可以反复读取事务一开始看到的数据，该数据是不会有变化的，这种隔离级别保证了事务的一致性。（Mysql的默认隔离级别）  这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。所以mysql不存在幻读，mysql实现和定义的RR级别和标准的不一样。\n\n串行化读(SERIALIZABLE)：每次读都需要获得表级的共享锁，每次写都要为表加上排他锁，两个会话间的读写都会相互堵塞，该隔离级别会导致InnoDB表并发性的丧失，与MyISAM类似。这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n \n\n\n|隔离级别                         |脏读（Dirty Read）          |不可重复读（NonRepeatable Read）     |幻读（Phantom Read） \n|---------------------------------|----------------------------|-------------------------------------|-------------------------------|\n|未提交读（Read uncommitted）     |   可能                     |                可能                 |                           可能|\n|已提交读（Read committed）       |不可能                      |             可能                    |                           可能|\n|可重复读（Repeatable read）      | 不可能                     |              不可能                 |                           可能|\n|可串行化（Serializable ）        |    不可能                  |                  不可能             |                         不可能|\n\n\n\n \n\nInnoDB行锁\n\nInnoDB的锁有三种：\n\nRecord lock：行记录锁，该锁是基于InnoDB索引实现的，也称索引行锁。例：两条记录a和b，这两条记录上都有一个Record lock。\n\nGap lock：间隙锁，锁定一定的范围，但不含记录的本身。记录a和b，a前有一个Gap lock，a与b之前有一个Gap lock，b之后也有一个Gap lock。\n\nNext-key lock：锁定一个放单位和本身，即Record lock+Gap lock，Next-key lock解决了幻读的问题。\n\n \n\n基于主键的行锁是只有record lock的，因为主键的行是唯一的，不会有冲突的，如果在有锁的情况下修改改记录是会直接冲突，不需要范围锁定，即没有gap lock。\n\n基于辅助索引的行锁，除了record lock外，可能也要有gap lock，即next-key lock。唯一的辅助索引只有record lock，而非唯一索引中的辅助索引是有next-key lock的。\n\n如果会话是基于非索引的条件修改数据（删除与更新，注意没有插入）时，在RR级别下，有可能会导致所有的行记录都被锁住，相当于全表锁。\n\n \n\nInnoDB死锁：\n\n死锁只存在并发的情况，串行是不会发生死锁的。会话A等待会话B释放资源，而会话B也在等待A的释放，此时就会发生死锁，即只要构成等待回路，则均认为会发生死锁。\n发生死锁的相关信息，可以通过“show engine innodb status\\G”发现死锁的相关信息","source":"_posts/事务隔离级别.md","raw":"---\ntitle: 事务隔离级别\ndate: 2015-01-22 19:18:25\ncategories: 数据库\ntags: 数据库\n---\n\ndirty read（脏读）：一个事务B中修改了一些数据但没有提交，而事务A却读取该数据并在其基础上进行操作，如果事务B进行回滚，那么事务A读到的数据是无效的，不符合数据一致性。\n\nunrepeatable read（不可重复读）：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。事务A在执行过程中读到了另一个事务B中已经修改并提交的数据，这不符合隔离性。例如：事务A开始时，读取事务B中数据a为10，在A结束时，又读一次a，发现变为20。\n\nphantom read（幻读）： 第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。事务A读取到了事务B新增的数据，也是不符合隔离性的。\n\n四种不同的事务隔离级别：\n\nRU(READ UNCOMMITTED)，读未提交：一个事务可以去读取其他事务未提交的变更，这种隔离级别允许脏读发生。在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。\n\nRC(READ COMMITTED)，读已提交：一个事务可以去读取其他事务提交的变更，这种隔离级别允许不可重复读、幻读的发生。（ORACAL默认的隔离级别） 这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果\n\nRR(REPEATABLE READ)，可重复读：一个事务中，直到事务结束前，都可以反复读取事务一开始看到的数据，该数据是不会有变化的，这种隔离级别保证了事务的一致性。（Mysql的默认隔离级别）  这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。所以mysql不存在幻读，mysql实现和定义的RR级别和标准的不一样。\n\n串行化读(SERIALIZABLE)：每次读都需要获得表级的共享锁，每次写都要为表加上排他锁，两个会话间的读写都会相互堵塞，该隔离级别会导致InnoDB表并发性的丧失，与MyISAM类似。这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。\n\n \n\n\n|隔离级别                         |脏读（Dirty Read）          |不可重复读（NonRepeatable Read）     |幻读（Phantom Read） \n|---------------------------------|----------------------------|-------------------------------------|-------------------------------|\n|未提交读（Read uncommitted）     |   可能                     |                可能                 |                           可能|\n|已提交读（Read committed）       |不可能                      |             可能                    |                           可能|\n|可重复读（Repeatable read）      | 不可能                     |              不可能                 |                           可能|\n|可串行化（Serializable ）        |    不可能                  |                  不可能             |                         不可能|\n\n\n\n \n\nInnoDB行锁\n\nInnoDB的锁有三种：\n\nRecord lock：行记录锁，该锁是基于InnoDB索引实现的，也称索引行锁。例：两条记录a和b，这两条记录上都有一个Record lock。\n\nGap lock：间隙锁，锁定一定的范围，但不含记录的本身。记录a和b，a前有一个Gap lock，a与b之前有一个Gap lock，b之后也有一个Gap lock。\n\nNext-key lock：锁定一个放单位和本身，即Record lock+Gap lock，Next-key lock解决了幻读的问题。\n\n \n\n基于主键的行锁是只有record lock的，因为主键的行是唯一的，不会有冲突的，如果在有锁的情况下修改改记录是会直接冲突，不需要范围锁定，即没有gap lock。\n\n基于辅助索引的行锁，除了record lock外，可能也要有gap lock，即next-key lock。唯一的辅助索引只有record lock，而非唯一索引中的辅助索引是有next-key lock的。\n\n如果会话是基于非索引的条件修改数据（删除与更新，注意没有插入）时，在RR级别下，有可能会导致所有的行记录都被锁住，相当于全表锁。\n\n \n\nInnoDB死锁：\n\n死锁只存在并发的情况，串行是不会发生死锁的。会话A等待会话B释放资源，而会话B也在等待A的释放，此时就会发生死锁，即只要构成等待回路，则均认为会发生死锁。\n发生死锁的相关信息，可以通过“show engine innodb status\\G”发现死锁的相关信息","slug":"事务隔离级别","published":1,"updated":"2018-10-15T02:23:24.748Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny09rgc000k40v78idz82yg","content":"<p>dirty read（脏读）：一个事务B中修改了一些数据但没有提交，而事务A却读取该数据并在其基础上进行操作，如果事务B进行回滚，那么事务A读到的数据是无效的，不符合数据一致性。</p>\n<p>unrepeatable read（不可重复读）：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。事务A在执行过程中读到了另一个事务B中已经修改并提交的数据，这不符合隔离性。例如：事务A开始时，读取事务B中数据a为10，在A结束时，又读一次a，发现变为20。</p>\n<p>phantom read（幻读）： 第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。事务A读取到了事务B新增的数据，也是不符合隔离性的。</p>\n<p>四种不同的事务隔离级别：</p>\n<p>RU(READ UNCOMMITTED)，读未提交：一个事务可以去读取其他事务未提交的变更，这种隔离级别允许脏读发生。在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。</p>\n<p>RC(READ COMMITTED)，读已提交：一个事务可以去读取其他事务提交的变更，这种隔离级别允许不可重复读、幻读的发生。（ORACAL默认的隔离级别） 这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果</p>\n<p>RR(REPEATABLE READ)，可重复读：一个事务中，直到事务结束前，都可以反复读取事务一开始看到的数据，该数据是不会有变化的，这种隔离级别保证了事务的一致性。（Mysql的默认隔离级别）  这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。所以mysql不存在幻读，mysql实现和定义的RR级别和标准的不一样。</p>\n<p>串行化读(SERIALIZABLE)：每次读都需要获得表级的共享锁，每次写都要为表加上排他锁，两个会话间的读写都会相互堵塞，该隔离级别会导致InnoDB表并发性的丧失，与MyISAM类似。这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读（Dirty Read）</th>\n<th>不可重复读（NonRepeatable Read）</th>\n<th>幻读（Phantom Read） </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>未提交读（Read uncommitted）</td>\n<td>可能</td>\n<td>可能</td>\n<td>可能</td>\n</tr>\n<tr>\n<td>已提交读（Read committed）</td>\n<td>不可能</td>\n<td>可能</td>\n<td>可能</td>\n</tr>\n<tr>\n<td>可重复读（Repeatable read）</td>\n<td>不可能</td>\n<td>不可能</td>\n<td>可能</td>\n</tr>\n<tr>\n<td>可串行化（Serializable ）</td>\n<td>不可能</td>\n<td>不可能</td>\n<td>不可能</td>\n</tr>\n</tbody>\n</table>\n<p>InnoDB行锁</p>\n<p>InnoDB的锁有三种：</p>\n<p>Record lock：行记录锁，该锁是基于InnoDB索引实现的，也称索引行锁。例：两条记录a和b，这两条记录上都有一个Record lock。</p>\n<p>Gap lock：间隙锁，锁定一定的范围，但不含记录的本身。记录a和b，a前有一个Gap lock，a与b之前有一个Gap lock，b之后也有一个Gap lock。</p>\n<p>Next-key lock：锁定一个放单位和本身，即Record lock+Gap lock，Next-key lock解决了幻读的问题。</p>\n<p>基于主键的行锁是只有record lock的，因为主键的行是唯一的，不会有冲突的，如果在有锁的情况下修改改记录是会直接冲突，不需要范围锁定，即没有gap lock。</p>\n<p>基于辅助索引的行锁，除了record lock外，可能也要有gap lock，即next-key lock。唯一的辅助索引只有record lock，而非唯一索引中的辅助索引是有next-key lock的。</p>\n<p>如果会话是基于非索引的条件修改数据（删除与更新，注意没有插入）时，在RR级别下，有可能会导致所有的行记录都被锁住，相当于全表锁。</p>\n<p>InnoDB死锁：</p>\n<p>死锁只存在并发的情况，串行是不会发生死锁的。会话A等待会话B释放资源，而会话B也在等待A的释放，此时就会发生死锁，即只要构成等待回路，则均认为会发生死锁。<br>发生死锁的相关信息，可以通过“show engine innodb status\\G”发现死锁的相关信息</p>\n","site":{"data":{}},"excerpt":"","more":"<p>dirty read（脏读）：一个事务B中修改了一些数据但没有提交，而事务A却读取该数据并在其基础上进行操作，如果事务B进行回滚，那么事务A读到的数据是无效的，不符合数据一致性。</p>\n<p>unrepeatable read（不可重复读）：是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。事务A在执行过程中读到了另一个事务B中已经修改并提交的数据，这不符合隔离性。例如：事务A开始时，读取事务B中数据a为10，在A结束时，又读一次a，发现变为20。</p>\n<p>phantom read（幻读）： 第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。事务A读取到了事务B新增的数据，也是不符合隔离性的。</p>\n<p>四种不同的事务隔离级别：</p>\n<p>RU(READ UNCOMMITTED)，读未提交：一个事务可以去读取其他事务未提交的变更，这种隔离级别允许脏读发生。在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。</p>\n<p>RC(READ COMMITTED)，读已提交：一个事务可以去读取其他事务提交的变更，这种隔离级别允许不可重复读、幻读的发生。（ORACAL默认的隔离级别） 这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果</p>\n<p>RR(REPEATABLE READ)，可重复读：一个事务中，直到事务结束前，都可以反复读取事务一开始看到的数据，该数据是不会有变化的，这种隔离级别保证了事务的一致性。（Mysql的默认隔离级别）  这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：幻读 （Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影” 行。InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。所以mysql不存在幻读，mysql实现和定义的RR级别和标准的不一样。</p>\n<p>串行化读(SERIALIZABLE)：每次读都需要获得表级的共享锁，每次写都要为表加上排他锁，两个会话间的读写都会相互堵塞，该隔离级别会导致InnoDB表并发性的丧失，与MyISAM类似。这是最高的隔离级别，它通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读（Dirty Read）</th>\n<th>不可重复读（NonRepeatable Read）</th>\n<th>幻读（Phantom Read） </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>未提交读（Read uncommitted）</td>\n<td>可能</td>\n<td>可能</td>\n<td>可能</td>\n</tr>\n<tr>\n<td>已提交读（Read committed）</td>\n<td>不可能</td>\n<td>可能</td>\n<td>可能</td>\n</tr>\n<tr>\n<td>可重复读（Repeatable read）</td>\n<td>不可能</td>\n<td>不可能</td>\n<td>可能</td>\n</tr>\n<tr>\n<td>可串行化（Serializable ）</td>\n<td>不可能</td>\n<td>不可能</td>\n<td>不可能</td>\n</tr>\n</tbody>\n</table>\n<p>InnoDB行锁</p>\n<p>InnoDB的锁有三种：</p>\n<p>Record lock：行记录锁，该锁是基于InnoDB索引实现的，也称索引行锁。例：两条记录a和b，这两条记录上都有一个Record lock。</p>\n<p>Gap lock：间隙锁，锁定一定的范围，但不含记录的本身。记录a和b，a前有一个Gap lock，a与b之前有一个Gap lock，b之后也有一个Gap lock。</p>\n<p>Next-key lock：锁定一个放单位和本身，即Record lock+Gap lock，Next-key lock解决了幻读的问题。</p>\n<p>基于主键的行锁是只有record lock的，因为主键的行是唯一的，不会有冲突的，如果在有锁的情况下修改改记录是会直接冲突，不需要范围锁定，即没有gap lock。</p>\n<p>基于辅助索引的行锁，除了record lock外，可能也要有gap lock，即next-key lock。唯一的辅助索引只有record lock，而非唯一索引中的辅助索引是有next-key lock的。</p>\n<p>如果会话是基于非索引的条件修改数据（删除与更新，注意没有插入）时，在RR级别下，有可能会导致所有的行记录都被锁住，相当于全表锁。</p>\n<p>InnoDB死锁：</p>\n<p>死锁只存在并发的情况，串行是不会发生死锁的。会话A等待会话B释放资源，而会话B也在等待A的释放，此时就会发生死锁，即只要构成等待回路，则均认为会发生死锁。<br>发生死锁的相关信息，可以通过“show engine innodb status\\G”发现死锁的相关信息</p>\n"},{"title":"tcp状态","date":"2015-04-01T11:39:05.000Z","photos":["2015/04/01/tcp状态/tcp_state.gif"],"_content":"\n\n全部11种状态\n1. 客户端独有的：（1）SYN_SENT （2）FIN_WAIT1 （3）FIN_WAIT2 （4）CLOSING （5）TIME_WAIT \n2. 服务器独有的：（1）LISTEN （2）SYN_RCVD （3）CLOSE_WAIT （4）LAST_ACK \n3. 共有的：（1）CLOSED （2）ESTABLISHED \n\n各个状态的意义如下： \n(1)  LISTEN - 侦听来自远方TCP端口的连接请求； \n(2)  SYN-SENT -在发送连接请求后等待匹配的连接请求； \n(3)  SYN-RECEIVED - 在收到和发送一个连接请求后等待对连接请求的确认； \n(4)  ESTABLISHED- 代表一个打开的连接，数据可以传送给用户； \n(5)  FIN-WAIT-1 - 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；\n(6)  FIN-WAIT-2 - 从远程TCP等待连接中断请求； \n(7)  CLOSE-WAIT - 等待从本地用户发来的连接中断请求； \n(8)  CLOSING -等待远程TCP对连接中断的确认； \n(9)  LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认； \n(10) TIME-WAIT -等待足够的时间以确保远程TCP接收到连接中断请求的确认； \n(11) CLOSED - 没有任何连接状态；\n     \n<img src=\"tcp状态/tcp_open_close.jpg\" width=\"100%\" height=\"100%\">\n\n## 1. TCP连接建立\n### 1.1 过程\n（1）客户 端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1。\n（2）服务器端回应客户端的，这是三次握手中的第2个报文，这个报文同时带ACK标志和SYN标 志。因此它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好进行数据通 讯。\n（3）客户必须再次回应服务段一个ACK报文，这是报文段3。\n### 1.2 为什么需要三次\n本质上是为了连接双方交换 ISN（Inital Sequence Number），另外 TCP 是全双工的协议，所以每次 SYN，都需要有对应的 ACK。加上服务端的 ACK 和 SYN 是在同一个包中，也就形成了 3 次握手。\n\n## 2. TCP连接断开\n### 2.1 过程 \n（1）客户端进程主动向服务端发出连接释放请求报文，并停止发送数据，主动关闭TCP连接。释放连接报文段中控制为FIN=1，序列号为seq=i，发送该报文段后客户端进入FIN_WAIT_1（终止等待１）状态，等待服务器确认。这是TCP连接释放的第一次挥手。\n（2）服务器收到连接释放请求报文段后即发出确认释放连接的报文段，该报文段中控制位ACK=1，确认号为ack=i+1，然后服务器进入CLOSE_WAIT（关闭等待）状态。此时TCP处于半关闭状态，即客户端已经不向服务器发送数据，但服务器仍可向客户端发送数据。这是TCP连接释放的第二次挥手。\n（3）客户端收到服务器的确认信息后，就进入了FIN_WAIT_2（终止等待２）状态，等待服务器发出连接释放请求报文段，若没有数据需要传输，服务器被动向客户端发出链接释放请求报文段，报文段中控制位FIN=1，序列号seq=j，此时服务器进入LAST_ACK（最后确认）状态，等待客户端的确认应答，这是TCP连接释放的第三次挥手。\n（4）客户端收到服务器的连接释放请求后，必须对此发出确认。确认报文段中控制位ACK＝１，确认应答号ack=j+1，客户端发出确认应答消息后进入TIME_WAIT（时间等待）状态。在这段时间内TCP连接并没有释放，必须等待２MSL时间后，客户端才进入CLOSED状态。服务器收到客户端的确认应答后，就进入CLOSED状态。直到客户端和服务器都进入了CLOSED状态后，连接就完全释放了，这是TCP连接释放的第四此挥手。\n\n### .2 为什么断开连接需要4次挥手 \n因为当处于LISTEN状态的服务器端收到来自客户端的SYN报文(客户端希望新建一个TCP连接)时，它可以把ACK(确认应答)和SYN(同步序号)放在同一个报文里来发送给客户端。但在关闭TCP连接时，当收到对方的FIN报文时，对方仅仅表示对方已经没有数据发送给你了，但是你自己可能还有数据需要发送给对方，则等你发送完剩余的数据给对方之后，再发送FIN报文给对方来表示你数据已经发送完毕，并请求关闭连接，所以通常情况下，这里的ACK报文和FIN报文都是分开发送的。\n\n### 2.3 CLOSE_WAIT \nCLOSE_WAIT的状态位于向对方确认FIN之后，向对方发送FIN之前，这段时间由于对方已经发送了FIN，也就表示不会再收到数据，但是这并不表示自己没有数据要发，毕竟只有在发送了FIN之后，才表示发送完毕。所以，CLOSE_WAIT这段时间主要的工作就是给对方发送必要的数据，对自己的数据进行收尾，所有工作结束之后，调用close()，发送FIN，等待LAST_ACK\n\n### 2.4 TIME_WAIT的作用 \n（1）实现终止TCP全双工连接的可靠性：假如LAST-ACK丢失，对方重发，但是自己已经关闭连接，那么会返回一个RST包，对放会将其解释为错误，从而无法正常关闭。也就是说，TIME_WAIT的作用之一就是解决LAST-ACK可能丢包的情况，因为在有些网络不好的情况下，不得不重发LAST-ACK\n（2）允许老的网络分组在网络中消逝：2MSL的时间足够让所有的FIN数据在网络中消失，如果不等待，并立即开始一个新的连接，有可能出现老FIN关闭了新连接的情况，因为在IP和端口一直的情况下，很难区分一个数据包是属于哪一次连接的。\n\n### 2.5 等待2MSL时间 \n（1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到ACK，就会出发被动端重发FIN。因为最后一次确认应答ACK报文段很有可能丢失，因而使被动关闭方处在LAST_ACK，此时被动关闭方会重复这个FIN+ACK报文段，在这等待的2MSL时间被主动关闭方重新收到这个被动关闭方重发的FIN+ACK报文段，因此，主动关闭方会重新发送确认应答信息，从而重新启动2MSL计时器，直到通信双方都进入CLOSED状态。如果主动关闭方在TIME_WAIT状态不等待一段时间就直接释放连接并进入CLOSED状态，那么主动关闭方无法收到来自被动关闭方重发的FIN+ACK报文段，也就不会再发送一次确认ACK报文段，因此被动关闭方就无法正常地进入CLOSED状态。\n（2）有足够的时间让这个连接不会跟后面的连接混在一起。防止已失效的请求连接出现在本连接中。在连接处于2MSL等待时，任何迟到的报文段将被丢弃，因为处于2MSL等待的，由该插口(插口是IP端口对的意思，socket)定义的连接在这段时间内将不能被再用，这样就可以使下一个新的连接中不会出现这种旧的连接以前延迟的报文段。","source":"_posts/tcp状态.md","raw":"---\ntitle: tcp状态\ndate: 2015-04-01 19:39:05\ncategories: 网络\ntags: 网络\nphotos: \"2015/04/01/tcp状态/tcp_state.gif\"\n---\n\n\n全部11种状态\n1. 客户端独有的：（1）SYN_SENT （2）FIN_WAIT1 （3）FIN_WAIT2 （4）CLOSING （5）TIME_WAIT \n2. 服务器独有的：（1）LISTEN （2）SYN_RCVD （3）CLOSE_WAIT （4）LAST_ACK \n3. 共有的：（1）CLOSED （2）ESTABLISHED \n\n各个状态的意义如下： \n(1)  LISTEN - 侦听来自远方TCP端口的连接请求； \n(2)  SYN-SENT -在发送连接请求后等待匹配的连接请求； \n(3)  SYN-RECEIVED - 在收到和发送一个连接请求后等待对连接请求的确认； \n(4)  ESTABLISHED- 代表一个打开的连接，数据可以传送给用户； \n(5)  FIN-WAIT-1 - 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；\n(6)  FIN-WAIT-2 - 从远程TCP等待连接中断请求； \n(7)  CLOSE-WAIT - 等待从本地用户发来的连接中断请求； \n(8)  CLOSING -等待远程TCP对连接中断的确认； \n(9)  LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认； \n(10) TIME-WAIT -等待足够的时间以确保远程TCP接收到连接中断请求的确认； \n(11) CLOSED - 没有任何连接状态；\n     \n<img src=\"tcp状态/tcp_open_close.jpg\" width=\"100%\" height=\"100%\">\n\n## 1. TCP连接建立\n### 1.1 过程\n（1）客户 端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1。\n（2）服务器端回应客户端的，这是三次握手中的第2个报文，这个报文同时带ACK标志和SYN标 志。因此它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好进行数据通 讯。\n（3）客户必须再次回应服务段一个ACK报文，这是报文段3。\n### 1.2 为什么需要三次\n本质上是为了连接双方交换 ISN（Inital Sequence Number），另外 TCP 是全双工的协议，所以每次 SYN，都需要有对应的 ACK。加上服务端的 ACK 和 SYN 是在同一个包中，也就形成了 3 次握手。\n\n## 2. TCP连接断开\n### 2.1 过程 \n（1）客户端进程主动向服务端发出连接释放请求报文，并停止发送数据，主动关闭TCP连接。释放连接报文段中控制为FIN=1，序列号为seq=i，发送该报文段后客户端进入FIN_WAIT_1（终止等待１）状态，等待服务器确认。这是TCP连接释放的第一次挥手。\n（2）服务器收到连接释放请求报文段后即发出确认释放连接的报文段，该报文段中控制位ACK=1，确认号为ack=i+1，然后服务器进入CLOSE_WAIT（关闭等待）状态。此时TCP处于半关闭状态，即客户端已经不向服务器发送数据，但服务器仍可向客户端发送数据。这是TCP连接释放的第二次挥手。\n（3）客户端收到服务器的确认信息后，就进入了FIN_WAIT_2（终止等待２）状态，等待服务器发出连接释放请求报文段，若没有数据需要传输，服务器被动向客户端发出链接释放请求报文段，报文段中控制位FIN=1，序列号seq=j，此时服务器进入LAST_ACK（最后确认）状态，等待客户端的确认应答，这是TCP连接释放的第三次挥手。\n（4）客户端收到服务器的连接释放请求后，必须对此发出确认。确认报文段中控制位ACK＝１，确认应答号ack=j+1，客户端发出确认应答消息后进入TIME_WAIT（时间等待）状态。在这段时间内TCP连接并没有释放，必须等待２MSL时间后，客户端才进入CLOSED状态。服务器收到客户端的确认应答后，就进入CLOSED状态。直到客户端和服务器都进入了CLOSED状态后，连接就完全释放了，这是TCP连接释放的第四此挥手。\n\n### .2 为什么断开连接需要4次挥手 \n因为当处于LISTEN状态的服务器端收到来自客户端的SYN报文(客户端希望新建一个TCP连接)时，它可以把ACK(确认应答)和SYN(同步序号)放在同一个报文里来发送给客户端。但在关闭TCP连接时，当收到对方的FIN报文时，对方仅仅表示对方已经没有数据发送给你了，但是你自己可能还有数据需要发送给对方，则等你发送完剩余的数据给对方之后，再发送FIN报文给对方来表示你数据已经发送完毕，并请求关闭连接，所以通常情况下，这里的ACK报文和FIN报文都是分开发送的。\n\n### 2.3 CLOSE_WAIT \nCLOSE_WAIT的状态位于向对方确认FIN之后，向对方发送FIN之前，这段时间由于对方已经发送了FIN，也就表示不会再收到数据，但是这并不表示自己没有数据要发，毕竟只有在发送了FIN之后，才表示发送完毕。所以，CLOSE_WAIT这段时间主要的工作就是给对方发送必要的数据，对自己的数据进行收尾，所有工作结束之后，调用close()，发送FIN，等待LAST_ACK\n\n### 2.4 TIME_WAIT的作用 \n（1）实现终止TCP全双工连接的可靠性：假如LAST-ACK丢失，对方重发，但是自己已经关闭连接，那么会返回一个RST包，对放会将其解释为错误，从而无法正常关闭。也就是说，TIME_WAIT的作用之一就是解决LAST-ACK可能丢包的情况，因为在有些网络不好的情况下，不得不重发LAST-ACK\n（2）允许老的网络分组在网络中消逝：2MSL的时间足够让所有的FIN数据在网络中消失，如果不等待，并立即开始一个新的连接，有可能出现老FIN关闭了新连接的情况，因为在IP和端口一直的情况下，很难区分一个数据包是属于哪一次连接的。\n\n### 2.5 等待2MSL时间 \n（1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到ACK，就会出发被动端重发FIN。因为最后一次确认应答ACK报文段很有可能丢失，因而使被动关闭方处在LAST_ACK，此时被动关闭方会重复这个FIN+ACK报文段，在这等待的2MSL时间被主动关闭方重新收到这个被动关闭方重发的FIN+ACK报文段，因此，主动关闭方会重新发送确认应答信息，从而重新启动2MSL计时器，直到通信双方都进入CLOSED状态。如果主动关闭方在TIME_WAIT状态不等待一段时间就直接释放连接并进入CLOSED状态，那么主动关闭方无法收到来自被动关闭方重发的FIN+ACK报文段，也就不会再发送一次确认ACK报文段，因此被动关闭方就无法正常地进入CLOSED状态。\n（2）有足够的时间让这个连接不会跟后面的连接混在一起。防止已失效的请求连接出现在本连接中。在连接处于2MSL等待时，任何迟到的报文段将被丢弃，因为处于2MSL等待的，由该插口(插口是IP端口对的意思，socket)定义的连接在这段时间内将不能被再用，这样就可以使下一个新的连接中不会出现这种旧的连接以前延迟的报文段。","slug":"tcp状态","published":1,"updated":"2018-10-15T02:28:06.648Z","comments":1,"layout":"post","link":"","_id":"cjny09rgf000p40v7vwylfzna","content":"<p>全部11种状态</p>\n<ol>\n<li>客户端独有的：（1）SYN_SENT （2）FIN_WAIT1 （3）FIN_WAIT2 （4）CLOSING （5）TIME_WAIT </li>\n<li>服务器独有的：（1）LISTEN （2）SYN_RCVD （3）CLOSE_WAIT （4）LAST_ACK </li>\n<li>共有的：（1）CLOSED （2）ESTABLISHED </li>\n</ol>\n<p>各个状态的意义如下：<br>(1)  LISTEN - 侦听来自远方TCP端口的连接请求；<br>(2)  SYN-SENT -在发送连接请求后等待匹配的连接请求；<br>(3)  SYN-RECEIVED - 在收到和发送一个连接请求后等待对连接请求的确认；<br>(4)  ESTABLISHED- 代表一个打开的连接，数据可以传送给用户；<br>(5)  FIN-WAIT-1 - 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；<br>(6)  FIN-WAIT-2 - 从远程TCP等待连接中断请求；<br>(7)  CLOSE-WAIT - 等待从本地用户发来的连接中断请求；<br>(8)  CLOSING -等待远程TCP对连接中断的确认；<br>(9)  LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认；<br>(10) TIME-WAIT -等待足够的时间以确保远程TCP接收到连接中断请求的确认；<br>(11) CLOSED - 没有任何连接状态；</p>\n<p><img src=\"/2015/04/01/tcp状态/tcp_open_close.jpg\" width=\"100%\" height=\"100%\"></p>\n<h2 id=\"1-TCP连接建立\"><a href=\"#1-TCP连接建立\" class=\"headerlink\" title=\"1. TCP连接建立\"></a>1. TCP连接建立</h2><h3 id=\"1-1-过程\"><a href=\"#1-1-过程\" class=\"headerlink\" title=\"1.1 过程\"></a>1.1 过程</h3><p>（1）客户 端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1。<br>（2）服务器端回应客户端的，这是三次握手中的第2个报文，这个报文同时带ACK标志和SYN标 志。因此它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好进行数据通 讯。<br>（3）客户必须再次回应服务段一个ACK报文，这是报文段3。</p>\n<h3 id=\"1-2-为什么需要三次\"><a href=\"#1-2-为什么需要三次\" class=\"headerlink\" title=\"1.2 为什么需要三次\"></a>1.2 为什么需要三次</h3><p>本质上是为了连接双方交换 ISN（Inital Sequence Number），另外 TCP 是全双工的协议，所以每次 SYN，都需要有对应的 ACK。加上服务端的 ACK 和 SYN 是在同一个包中，也就形成了 3 次握手。</p>\n<h2 id=\"2-TCP连接断开\"><a href=\"#2-TCP连接断开\" class=\"headerlink\" title=\"2. TCP连接断开\"></a>2. TCP连接断开</h2><h3 id=\"2-1-过程\"><a href=\"#2-1-过程\" class=\"headerlink\" title=\"2.1 过程\"></a>2.1 过程</h3><p>（1）客户端进程主动向服务端发出连接释放请求报文，并停止发送数据，主动关闭TCP连接。释放连接报文段中控制为FIN=1，序列号为seq=i，发送该报文段后客户端进入FIN_WAIT_1（终止等待１）状态，等待服务器确认。这是TCP连接释放的第一次挥手。<br>（2）服务器收到连接释放请求报文段后即发出确认释放连接的报文段，该报文段中控制位ACK=1，确认号为ack=i+1，然后服务器进入CLOSE_WAIT（关闭等待）状态。此时TCP处于半关闭状态，即客户端已经不向服务器发送数据，但服务器仍可向客户端发送数据。这是TCP连接释放的第二次挥手。<br>（3）客户端收到服务器的确认信息后，就进入了FIN_WAIT_2（终止等待２）状态，等待服务器发出连接释放请求报文段，若没有数据需要传输，服务器被动向客户端发出链接释放请求报文段，报文段中控制位FIN=1，序列号seq=j，此时服务器进入LAST_ACK（最后确认）状态，等待客户端的确认应答，这是TCP连接释放的第三次挥手。<br>（4）客户端收到服务器的连接释放请求后，必须对此发出确认。确认报文段中控制位ACK＝１，确认应答号ack=j+1，客户端发出确认应答消息后进入TIME_WAIT（时间等待）状态。在这段时间内TCP连接并没有释放，必须等待２MSL时间后，客户端才进入CLOSED状态。服务器收到客户端的确认应答后，就进入CLOSED状态。直到客户端和服务器都进入了CLOSED状态后，连接就完全释放了，这是TCP连接释放的第四此挥手。</p>\n<h3 id=\"2-为什么断开连接需要4次挥手\"><a href=\"#2-为什么断开连接需要4次挥手\" class=\"headerlink\" title=\".2 为什么断开连接需要4次挥手\"></a>.2 为什么断开连接需要4次挥手</h3><p>因为当处于LISTEN状态的服务器端收到来自客户端的SYN报文(客户端希望新建一个TCP连接)时，它可以把ACK(确认应答)和SYN(同步序号)放在同一个报文里来发送给客户端。但在关闭TCP连接时，当收到对方的FIN报文时，对方仅仅表示对方已经没有数据发送给你了，但是你自己可能还有数据需要发送给对方，则等你发送完剩余的数据给对方之后，再发送FIN报文给对方来表示你数据已经发送完毕，并请求关闭连接，所以通常情况下，这里的ACK报文和FIN报文都是分开发送的。</p>\n<h3 id=\"2-3-CLOSE-WAIT\"><a href=\"#2-3-CLOSE-WAIT\" class=\"headerlink\" title=\"2.3 CLOSE_WAIT\"></a>2.3 CLOSE_WAIT</h3><p>CLOSE_WAIT的状态位于向对方确认FIN之后，向对方发送FIN之前，这段时间由于对方已经发送了FIN，也就表示不会再收到数据，但是这并不表示自己没有数据要发，毕竟只有在发送了FIN之后，才表示发送完毕。所以，CLOSE_WAIT这段时间主要的工作就是给对方发送必要的数据，对自己的数据进行收尾，所有工作结束之后，调用close()，发送FIN，等待LAST_ACK</p>\n<h3 id=\"2-4-TIME-WAIT的作用\"><a href=\"#2-4-TIME-WAIT的作用\" class=\"headerlink\" title=\"2.4 TIME_WAIT的作用\"></a>2.4 TIME_WAIT的作用</h3><p>（1）实现终止TCP全双工连接的可靠性：假如LAST-ACK丢失，对方重发，但是自己已经关闭连接，那么会返回一个RST包，对放会将其解释为错误，从而无法正常关闭。也就是说，TIME_WAIT的作用之一就是解决LAST-ACK可能丢包的情况，因为在有些网络不好的情况下，不得不重发LAST-ACK<br>（2）允许老的网络分组在网络中消逝：2MSL的时间足够让所有的FIN数据在网络中消失，如果不等待，并立即开始一个新的连接，有可能出现老FIN关闭了新连接的情况，因为在IP和端口一直的情况下，很难区分一个数据包是属于哪一次连接的。</p>\n<h3 id=\"2-5-等待2MSL时间\"><a href=\"#2-5-等待2MSL时间\" class=\"headerlink\" title=\"2.5 等待2MSL时间\"></a>2.5 等待2MSL时间</h3><p>（1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到ACK，就会出发被动端重发FIN。因为最后一次确认应答ACK报文段很有可能丢失，因而使被动关闭方处在LAST_ACK，此时被动关闭方会重复这个FIN+ACK报文段，在这等待的2MSL时间被主动关闭方重新收到这个被动关闭方重发的FIN+ACK报文段，因此，主动关闭方会重新发送确认应答信息，从而重新启动2MSL计时器，直到通信双方都进入CLOSED状态。如果主动关闭方在TIME_WAIT状态不等待一段时间就直接释放连接并进入CLOSED状态，那么主动关闭方无法收到来自被动关闭方重发的FIN+ACK报文段，也就不会再发送一次确认ACK报文段，因此被动关闭方就无法正常地进入CLOSED状态。<br>（2）有足够的时间让这个连接不会跟后面的连接混在一起。防止已失效的请求连接出现在本连接中。在连接处于2MSL等待时，任何迟到的报文段将被丢弃，因为处于2MSL等待的，由该插口(插口是IP端口对的意思，socket)定义的连接在这段时间内将不能被再用，这样就可以使下一个新的连接中不会出现这种旧的连接以前延迟的报文段。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>全部11种状态</p>\n<ol>\n<li>客户端独有的：（1）SYN_SENT （2）FIN_WAIT1 （3）FIN_WAIT2 （4）CLOSING （5）TIME_WAIT </li>\n<li>服务器独有的：（1）LISTEN （2）SYN_RCVD （3）CLOSE_WAIT （4）LAST_ACK </li>\n<li>共有的：（1）CLOSED （2）ESTABLISHED </li>\n</ol>\n<p>各个状态的意义如下：<br>(1)  LISTEN - 侦听来自远方TCP端口的连接请求；<br>(2)  SYN-SENT -在发送连接请求后等待匹配的连接请求；<br>(3)  SYN-RECEIVED - 在收到和发送一个连接请求后等待对连接请求的确认；<br>(4)  ESTABLISHED- 代表一个打开的连接，数据可以传送给用户；<br>(5)  FIN-WAIT-1 - 等待远程TCP的连接中断请求，或先前的连接中断请求的确认；<br>(6)  FIN-WAIT-2 - 从远程TCP等待连接中断请求；<br>(7)  CLOSE-WAIT - 等待从本地用户发来的连接中断请求；<br>(8)  CLOSING -等待远程TCP对连接中断的确认；<br>(9)  LAST-ACK - 等待原来发向远程TCP的连接中断请求的确认；<br>(10) TIME-WAIT -等待足够的时间以确保远程TCP接收到连接中断请求的确认；<br>(11) CLOSED - 没有任何连接状态；</p>\n<p><img src=\"/2015/04/01/tcp状态/tcp_open_close.jpg\" width=\"100%\" height=\"100%\"></p>\n<h2 id=\"1-TCP连接建立\"><a href=\"#1-TCP连接建立\" class=\"headerlink\" title=\"1. TCP连接建立\"></a>1. TCP连接建立</h2><h3 id=\"1-1-过程\"><a href=\"#1-1-过程\" class=\"headerlink\" title=\"1.1 过程\"></a>1.1 过程</h3><p>（1）客户 端发送一个带SYN标志的TCP报文到服务器。这是三次握手过程中的报文1。<br>（2）服务器端回应客户端的，这是三次握手中的第2个报文，这个报文同时带ACK标志和SYN标 志。因此它表示对刚才客户端SYN报文的回应；同时又标志SYN给客户端，询问客户端是否准备好进行数据通 讯。<br>（3）客户必须再次回应服务段一个ACK报文，这是报文段3。</p>\n<h3 id=\"1-2-为什么需要三次\"><a href=\"#1-2-为什么需要三次\" class=\"headerlink\" title=\"1.2 为什么需要三次\"></a>1.2 为什么需要三次</h3><p>本质上是为了连接双方交换 ISN（Inital Sequence Number），另外 TCP 是全双工的协议，所以每次 SYN，都需要有对应的 ACK。加上服务端的 ACK 和 SYN 是在同一个包中，也就形成了 3 次握手。</p>\n<h2 id=\"2-TCP连接断开\"><a href=\"#2-TCP连接断开\" class=\"headerlink\" title=\"2. TCP连接断开\"></a>2. TCP连接断开</h2><h3 id=\"2-1-过程\"><a href=\"#2-1-过程\" class=\"headerlink\" title=\"2.1 过程\"></a>2.1 过程</h3><p>（1）客户端进程主动向服务端发出连接释放请求报文，并停止发送数据，主动关闭TCP连接。释放连接报文段中控制为FIN=1，序列号为seq=i，发送该报文段后客户端进入FIN_WAIT_1（终止等待１）状态，等待服务器确认。这是TCP连接释放的第一次挥手。<br>（2）服务器收到连接释放请求报文段后即发出确认释放连接的报文段，该报文段中控制位ACK=1，确认号为ack=i+1，然后服务器进入CLOSE_WAIT（关闭等待）状态。此时TCP处于半关闭状态，即客户端已经不向服务器发送数据，但服务器仍可向客户端发送数据。这是TCP连接释放的第二次挥手。<br>（3）客户端收到服务器的确认信息后，就进入了FIN_WAIT_2（终止等待２）状态，等待服务器发出连接释放请求报文段，若没有数据需要传输，服务器被动向客户端发出链接释放请求报文段，报文段中控制位FIN=1，序列号seq=j，此时服务器进入LAST_ACK（最后确认）状态，等待客户端的确认应答，这是TCP连接释放的第三次挥手。<br>（4）客户端收到服务器的连接释放请求后，必须对此发出确认。确认报文段中控制位ACK＝１，确认应答号ack=j+1，客户端发出确认应答消息后进入TIME_WAIT（时间等待）状态。在这段时间内TCP连接并没有释放，必须等待２MSL时间后，客户端才进入CLOSED状态。服务器收到客户端的确认应答后，就进入CLOSED状态。直到客户端和服务器都进入了CLOSED状态后，连接就完全释放了，这是TCP连接释放的第四此挥手。</p>\n<h3 id=\"2-为什么断开连接需要4次挥手\"><a href=\"#2-为什么断开连接需要4次挥手\" class=\"headerlink\" title=\".2 为什么断开连接需要4次挥手\"></a>.2 为什么断开连接需要4次挥手</h3><p>因为当处于LISTEN状态的服务器端收到来自客户端的SYN报文(客户端希望新建一个TCP连接)时，它可以把ACK(确认应答)和SYN(同步序号)放在同一个报文里来发送给客户端。但在关闭TCP连接时，当收到对方的FIN报文时，对方仅仅表示对方已经没有数据发送给你了，但是你自己可能还有数据需要发送给对方，则等你发送完剩余的数据给对方之后，再发送FIN报文给对方来表示你数据已经发送完毕，并请求关闭连接，所以通常情况下，这里的ACK报文和FIN报文都是分开发送的。</p>\n<h3 id=\"2-3-CLOSE-WAIT\"><a href=\"#2-3-CLOSE-WAIT\" class=\"headerlink\" title=\"2.3 CLOSE_WAIT\"></a>2.3 CLOSE_WAIT</h3><p>CLOSE_WAIT的状态位于向对方确认FIN之后，向对方发送FIN之前，这段时间由于对方已经发送了FIN，也就表示不会再收到数据，但是这并不表示自己没有数据要发，毕竟只有在发送了FIN之后，才表示发送完毕。所以，CLOSE_WAIT这段时间主要的工作就是给对方发送必要的数据，对自己的数据进行收尾，所有工作结束之后，调用close()，发送FIN，等待LAST_ACK</p>\n<h3 id=\"2-4-TIME-WAIT的作用\"><a href=\"#2-4-TIME-WAIT的作用\" class=\"headerlink\" title=\"2.4 TIME_WAIT的作用\"></a>2.4 TIME_WAIT的作用</h3><p>（1）实现终止TCP全双工连接的可靠性：假如LAST-ACK丢失，对方重发，但是自己已经关闭连接，那么会返回一个RST包，对放会将其解释为错误，从而无法正常关闭。也就是说，TIME_WAIT的作用之一就是解决LAST-ACK可能丢包的情况，因为在有些网络不好的情况下，不得不重发LAST-ACK<br>（2）允许老的网络分组在网络中消逝：2MSL的时间足够让所有的FIN数据在网络中消失，如果不等待，并立即开始一个新的连接，有可能出现老FIN关闭了新连接的情况，因为在IP和端口一直的情况下，很难区分一个数据包是属于哪一次连接的。</p>\n<h3 id=\"2-5-等待2MSL时间\"><a href=\"#2-5-等待2MSL时间\" class=\"headerlink\" title=\"2.5 等待2MSL时间\"></a>2.5 等待2MSL时间</h3><p>（1）TIME_WAIT确保有足够的时间让对端收到了ACK，如果被动关闭的那方没有收到ACK，就会出发被动端重发FIN。因为最后一次确认应答ACK报文段很有可能丢失，因而使被动关闭方处在LAST_ACK，此时被动关闭方会重复这个FIN+ACK报文段，在这等待的2MSL时间被主动关闭方重新收到这个被动关闭方重发的FIN+ACK报文段，因此，主动关闭方会重新发送确认应答信息，从而重新启动2MSL计时器，直到通信双方都进入CLOSED状态。如果主动关闭方在TIME_WAIT状态不等待一段时间就直接释放连接并进入CLOSED状态，那么主动关闭方无法收到来自被动关闭方重发的FIN+ACK报文段，也就不会再发送一次确认ACK报文段，因此被动关闭方就无法正常地进入CLOSED状态。<br>（2）有足够的时间让这个连接不会跟后面的连接混在一起。防止已失效的请求连接出现在本连接中。在连接处于2MSL等待时，任何迟到的报文段将被丢弃，因为处于2MSL等待的，由该插口(插口是IP端口对的意思，socket)定义的连接在这段时间内将不能被再用，这样就可以使下一个新的连接中不会出现这种旧的连接以前延迟的报文段。</p>\n"},{"title":"sum条件求和","date":"2015-06-23T09:55:42.000Z","_content":"## 基本用法\nSUM函数的语法是： SELECT   SUM(expression )  FROM ables    WHERE    predicates;\n\n表达式可以是一个数值字段或公式。\n\n## 带条件的求和\n类似条件表达式:SUM(IF(F_FILED1=1,A,B))\n含义是如果F_FILED1等于1的话，那么就加上A，否则就加上B;\n\n## 应用场景\n### 计数\n比如要统计一列中某些值出现的次数，可以使用group by；\n但是，如果要求分组的条件不是具体值，而是集合，例如（2）、（1,3,4,5,6）\n```sql\n    SELECT COUNT(*) FROM T GROUP BY F1;\n    # 这样子是按照值分组的\n    \n    SELECT SUM(IF(F1=2,1,0)) AS G1,SUM(IF(F1=2,0,1)) AS G2 FROM T GROUP BY F1;\n    #这样子就可以解决问题\n```    ","source":"_posts/sum条件求和.md","raw":"---\ntitle: sum条件求和\ndate: 2015-06-23 17:55:42\ncategories: 数据库\ntags: [数据库，索引]\n---\n## 基本用法\nSUM函数的语法是： SELECT   SUM(expression )  FROM ables    WHERE    predicates;\n\n表达式可以是一个数值字段或公式。\n\n## 带条件的求和\n类似条件表达式:SUM(IF(F_FILED1=1,A,B))\n含义是如果F_FILED1等于1的话，那么就加上A，否则就加上B;\n\n## 应用场景\n### 计数\n比如要统计一列中某些值出现的次数，可以使用group by；\n但是，如果要求分组的条件不是具体值，而是集合，例如（2）、（1,3,4,5,6）\n```sql\n    SELECT COUNT(*) FROM T GROUP BY F1;\n    # 这样子是按照值分组的\n    \n    SELECT SUM(IF(F1=2,1,0)) AS G1,SUM(IF(F1=2,0,1)) AS G2 FROM T GROUP BY F1;\n    #这样子就可以解决问题\n```    ","slug":"sum条件求和","published":1,"updated":"2018-10-26T02:46:11.948Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjny09rn3001p40v7ge3crza8","content":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>SUM函数的语法是： SELECT   SUM(expression )  FROM ables    WHERE    predicates;</p>\n<p>表达式可以是一个数值字段或公式。</p>\n<h2 id=\"带条件的求和\"><a href=\"#带条件的求和\" class=\"headerlink\" title=\"带条件的求和\"></a>带条件的求和</h2><p>类似条件表达式:SUM(IF(F_FILED1=1,A,B))<br>含义是如果F_FILED1等于1的话，那么就加上A，否则就加上B;</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><h3 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h3><p>比如要统计一列中某些值出现的次数，可以使用group by；<br>但是，如果要求分组的条件不是具体值，而是集合，例如（2）、（1,3,4,5,6）</p>\n<pre><code class=\"sql\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> T <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> F1;\n# 这样子是按照值分组的\n\n<span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(<span class=\"keyword\">IF</span>(F1=<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)) <span class=\"keyword\">AS</span> G1,<span class=\"keyword\">SUM</span>(<span class=\"keyword\">IF</span>(F1=<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)) <span class=\"keyword\">AS</span> G2 <span class=\"keyword\">FROM</span> T <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> F1;\n#这样子就可以解决问题\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><p>SUM函数的语法是： SELECT   SUM(expression )  FROM ables    WHERE    predicates;</p>\n<p>表达式可以是一个数值字段或公式。</p>\n<h2 id=\"带条件的求和\"><a href=\"#带条件的求和\" class=\"headerlink\" title=\"带条件的求和\"></a>带条件的求和</h2><p>类似条件表达式:SUM(IF(F_FILED1=1,A,B))<br>含义是如果F_FILED1等于1的话，那么就加上A，否则就加上B;</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><h3 id=\"计数\"><a href=\"#计数\" class=\"headerlink\" title=\"计数\"></a>计数</h3><p>比如要统计一列中某些值出现的次数，可以使用group by；<br>但是，如果要求分组的条件不是具体值，而是集合，例如（2）、（1,3,4,5,6）</p>\n<pre><code class=\"sql\"><span class=\"keyword\">SELECT</span> <span class=\"keyword\">COUNT</span>(*) <span class=\"keyword\">FROM</span> T <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> F1;\n# 这样子是按照值分组的\n\n<span class=\"keyword\">SELECT</span> <span class=\"keyword\">SUM</span>(<span class=\"keyword\">IF</span>(F1=<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>)) <span class=\"keyword\">AS</span> G1,<span class=\"keyword\">SUM</span>(<span class=\"keyword\">IF</span>(F1=<span class=\"number\">2</span>,<span class=\"number\">0</span>,<span class=\"number\">1</span>)) <span class=\"keyword\">AS</span> G2 <span class=\"keyword\">FROM</span> T <span class=\"keyword\">GROUP</span> <span class=\"keyword\">BY</span> F1;\n#这样子就可以解决问题\n</code></pre>\n"},{"title":"STL系列二：deque","date":"2018-11-01T03:15:35.000Z","_content":"## 简介\ndeque是double-ended queue的简写，代表双向队列。它是一个顺序容器，并且可以动态的调整大小，在头部和尾部都可以进行扩展。\n看起来deque和vector有些类似，他们在头部和尾部进行插入、删除操作都有着很高的效率，不同的是，deque并不保证它的元素都存储在连续的内存空间，使用指针便宜去访问deque中的元素是非法操作。\nvector使用的是一个简单的数组来进行存储，当然这个数组可能会被进行扩展，但是deque存储在不同的内存块上，所以当元素特别多的时候，deque在扩展的时候比vector更有效率。\n\n## 使用方法\n### 构造方法\n  std::deque<int> first;                                // empty deque of ints\n  \n  std::deque<int> second (4,100);                       // four ints with value 100\n  \n  std::deque<int> third (second.begin(),second.end());  // iterating through second\n  \n  std::deque<int> fourth (third);                       // a copy of third\n\n### 访问方式\n1.a[i],可以直接使用下标访问array的元素；\n\n2.at(i),也可以\n\n3.front(),返回第一个元素\n\n4.back()，返回最后一个元素\n\n### 常用函数\n1.bool empty() 判断队列是否为空\n\n2.size() 返回队列的大小\n\n2.删除某个元素（疑惑，队列应该不允许随意删除元素）\niterator erase (iterator position);\niterator erase (iterator first, iterator last);\n\n3.插入元素（疑惑，这是插队啊）\ninsert (iterator position, const value_type& val);\t\nvoid insert (iterator position, size_type n, const value_type& val);\n\n4.swap(deque& x)交换两个队列的内容（这个感觉可以用赋值运算代替）\n\n5.精华函数,作为一个双向队列必须有这几个函数\npop_front() 返回并弹出头部元素\n\npop_back()  返回并弹出尾部元素\n\npush_front() 插入一个头部元素\n\npush_back()  插入一个尾部元素\n\n6.void shrink_to_fit();\n让队列减少内存空间，仅使用和它的大小匹配的内存就可以。因为大多数的队列是通过动态数组实现的；","source":"_posts/STL系列二：deque.md","raw":"---\ntitle: STL系列二：deque\ndate: 2018-11-01 11:15:35\ncategories: STL\ntags: [c++,STL]\n---\n## 简介\ndeque是double-ended queue的简写，代表双向队列。它是一个顺序容器，并且可以动态的调整大小，在头部和尾部都可以进行扩展。\n看起来deque和vector有些类似，他们在头部和尾部进行插入、删除操作都有着很高的效率，不同的是，deque并不保证它的元素都存储在连续的内存空间，使用指针便宜去访问deque中的元素是非法操作。\nvector使用的是一个简单的数组来进行存储，当然这个数组可能会被进行扩展，但是deque存储在不同的内存块上，所以当元素特别多的时候，deque在扩展的时候比vector更有效率。\n\n## 使用方法\n### 构造方法\n  std::deque<int> first;                                // empty deque of ints\n  \n  std::deque<int> second (4,100);                       // four ints with value 100\n  \n  std::deque<int> third (second.begin(),second.end());  // iterating through second\n  \n  std::deque<int> fourth (third);                       // a copy of third\n\n### 访问方式\n1.a[i],可以直接使用下标访问array的元素；\n\n2.at(i),也可以\n\n3.front(),返回第一个元素\n\n4.back()，返回最后一个元素\n\n### 常用函数\n1.bool empty() 判断队列是否为空\n\n2.size() 返回队列的大小\n\n2.删除某个元素（疑惑，队列应该不允许随意删除元素）\niterator erase (iterator position);\niterator erase (iterator first, iterator last);\n\n3.插入元素（疑惑，这是插队啊）\ninsert (iterator position, const value_type& val);\t\nvoid insert (iterator position, size_type n, const value_type& val);\n\n4.swap(deque& x)交换两个队列的内容（这个感觉可以用赋值运算代替）\n\n5.精华函数,作为一个双向队列必须有这几个函数\npop_front() 返回并弹出头部元素\n\npop_back()  返回并弹出尾部元素\n\npush_front() 插入一个头部元素\n\npush_back()  插入一个尾部元素\n\n6.void shrink_to_fit();\n让队列减少内存空间，仅使用和它的大小匹配的内存就可以。因为大多数的队列是通过动态数组实现的；","slug":"STL系列二：deque","published":1,"updated":"2018-11-01T11:16:42.870Z","_id":"cjny0p64800006gv7kwpchf02","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>deque是double-ended queue的简写，代表双向队列。它是一个顺序容器，并且可以动态的调整大小，在头部和尾部都可以进行扩展。<br>看起来deque和vector有些类似，他们在头部和尾部进行插入、删除操作都有着很高的效率，不同的是，deque并不保证它的元素都存储在连续的内存空间，使用指针便宜去访问deque中的元素是非法操作。<br>vector使用的是一个简单的数组来进行存储，当然这个数组可能会被进行扩展，但是deque存储在不同的内存块上，所以当元素特别多的时候，deque在扩展的时候比vector更有效率。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><p>  std::deque<int> first;                                // empty deque of ints</int></p>\n<p>  std::deque<int> second (4,100);                       // four ints with value 100</int></p>\n<p>  std::deque<int> third (second.begin(),second.end());  // iterating through second</int></p>\n<p>  std::deque<int> fourth (third);                       // a copy of third</int></p>\n<h3 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h3><p>1.a[i],可以直接使用下标访问array的元素；</p>\n<p>2.at(i),也可以</p>\n<p>3.front(),返回第一个元素</p>\n<p>4.back()，返回最后一个元素</p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>1.bool empty() 判断队列是否为空</p>\n<p>2.size() 返回队列的大小</p>\n<p>2.删除某个元素（疑惑，队列应该不允许随意删除元素）<br>iterator erase (iterator position);<br>iterator erase (iterator first, iterator last);</p>\n<p>3.插入元素（疑惑，这是插队啊）<br>insert (iterator position, const value_type&amp; val);<br>void insert (iterator position, size_type n, const value_type&amp; val);</p>\n<p>4.swap(deque&amp; x)交换两个队列的内容（这个感觉可以用赋值运算代替）</p>\n<p>5.精华函数,作为一个双向队列必须有这几个函数<br>pop_front() 返回并弹出头部元素</p>\n<p>pop_back()  返回并弹出尾部元素</p>\n<p>push_front() 插入一个头部元素</p>\n<p>push_back()  插入一个尾部元素</p>\n<p>6.void shrink_to_fit();<br>让队列减少内存空间，仅使用和它的大小匹配的内存就可以。因为大多数的队列是通过动态数组实现的；</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>deque是double-ended queue的简写，代表双向队列。它是一个顺序容器，并且可以动态的调整大小，在头部和尾部都可以进行扩展。<br>看起来deque和vector有些类似，他们在头部和尾部进行插入、删除操作都有着很高的效率，不同的是，deque并不保证它的元素都存储在连续的内存空间，使用指针便宜去访问deque中的元素是非法操作。<br>vector使用的是一个简单的数组来进行存储，当然这个数组可能会被进行扩展，但是deque存储在不同的内存块上，所以当元素特别多的时候，deque在扩展的时候比vector更有效率。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><p>  std::deque<int> first;                                // empty deque of ints</int></p>\n<p>  std::deque<int> second (4,100);                       // four ints with value 100</int></p>\n<p>  std::deque<int> third (second.begin(),second.end());  // iterating through second</int></p>\n<p>  std::deque<int> fourth (third);                       // a copy of third</int></p>\n<h3 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h3><p>1.a[i],可以直接使用下标访问array的元素；</p>\n<p>2.at(i),也可以</p>\n<p>3.front(),返回第一个元素</p>\n<p>4.back()，返回最后一个元素</p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>1.bool empty() 判断队列是否为空</p>\n<p>2.size() 返回队列的大小</p>\n<p>2.删除某个元素（疑惑，队列应该不允许随意删除元素）<br>iterator erase (iterator position);<br>iterator erase (iterator first, iterator last);</p>\n<p>3.插入元素（疑惑，这是插队啊）<br>insert (iterator position, const value_type&amp; val);<br>void insert (iterator position, size_type n, const value_type&amp; val);</p>\n<p>4.swap(deque&amp; x)交换两个队列的内容（这个感觉可以用赋值运算代替）</p>\n<p>5.精华函数,作为一个双向队列必须有这几个函数<br>pop_front() 返回并弹出头部元素</p>\n<p>pop_back()  返回并弹出尾部元素</p>\n<p>push_front() 插入一个头部元素</p>\n<p>push_back()  插入一个尾部元素</p>\n<p>6.void shrink_to_fit();<br>让队列减少内存空间，仅使用和它的大小匹配的内存就可以。因为大多数的队列是通过动态数组实现的；</p>\n"},{"title":"STL系列三：forward_list","date":"2018-11-01T11:17:25.000Z","_content":"## 简介\nforward_list是一个顺序容器，它的插入和删除操作都是固定的时间。\n\n它的实现是一个单向链表，所有的元素存储在不相关的内存区间，顺序试根据存储在元素中关联关系得到的。\n\nforward_list和list的区别在于，前者元素中仅仅记录了指向下一个元素的连接，后者的每一个元素同时记录了2个连接（既有指向下一个元素的又有指向前一个元素的），当然这样是的list消耗了更多的存储空间。但是在插入和删除操作上，forward_list更加的高效。\n\n和其他的顺序容器（array、vector、deque）相比较，forward_list在增删和移动数据上表现得更好，所以算法中大量的使用了它，比如排序算法。\n\n链表和其他的顺序容器相比，缺少了直接根据位置访问元素的功能，不论访问哪一个元素，都必须从第一个元素开始遍历，当然这个访问时间是线性的，并且链表需要消耗更多的存储空间去记录元素之间的连接关系。\n\nforward_list设计的初衷就是高效，和最简单的单项链表一样高效，事实上它是唯一个没有size这个成员函数的容器。因为每一次计算大小你都需要从头到尾遍历一遍，这很影响性能。或者使用一个计数器成员变量，每次增删元素都去更新一下计数，这个不仅消耗了额外的存储而且也十分影响性能。\n\n## 使用方法\n### 构造方法\n``` cpp\n    std::forward_list<int> first;                      // default: empty\n    std::forward_list<int> second (3,77);              // fill: 3 seventy-sevens\n    std::forward_list<int> third (second.begin(), second.end()); // range initialization\n    std::forward_list<int> fourth (third);            // copy constructor\n    std::forward_list<int> fifth (std::move(fourth));  // move ctor. (fourth wasted)\n    std::forward_list<int> sixth = {3, 52, 25, 90};    // initializer_list constructor\n```\n### 访问方式\n1.使用迭代器\n2.新式for循环 for (int& x: mylist) \n\n### 常用函数\nassign 赋值函数，使用一个链表的一部分去初始化另外一个链表\n\nemplace_front 在链表头部插入元素\n\npush_front 和emplace_front一回事，都是在头部插入新元素\n\npop_front 删除并返回链表头部\n\nemplace_after 在迭代器后插入新元素，同时迭代器自增\n\ninsert_after 在迭代器后插入新元素，区别emplace_after的是可以插入多个元素\n\nerase_after 删除迭代器后的一个或多个元素\n\nswap  交换两个链表的内容\n\nresize 调整大小，如果n小于当前size，就截断；如果n大于当前size，就使用尾部元素的值进行扩展。\n\nclear 清空所有元素\n\nsplice_after 拼接两个链表\n\nremove 删除指定值得元素\n\nremove_if 牛逼，自定义一个bool类型的函数，判断链表中的元素是否满足这个函数的设定\n\nunique 牛逼，也可以自定义比较i和i+1，注意使用这个得前提是显得进行排序\n\nmerge 合并两个链表\n\nsort 排序，也可以自定义排序函数\n\nreverse 链表反转\n","source":"_posts/STL系列三：forward-list.md","raw":"---\ntitle: STL系列三：forward_list\ndate: 2018-11-01 19:17:25\ncategories: STL\ntags: [c++,STL]\n---\n## 简介\nforward_list是一个顺序容器，它的插入和删除操作都是固定的时间。\n\n它的实现是一个单向链表，所有的元素存储在不相关的内存区间，顺序试根据存储在元素中关联关系得到的。\n\nforward_list和list的区别在于，前者元素中仅仅记录了指向下一个元素的连接，后者的每一个元素同时记录了2个连接（既有指向下一个元素的又有指向前一个元素的），当然这样是的list消耗了更多的存储空间。但是在插入和删除操作上，forward_list更加的高效。\n\n和其他的顺序容器（array、vector、deque）相比较，forward_list在增删和移动数据上表现得更好，所以算法中大量的使用了它，比如排序算法。\n\n链表和其他的顺序容器相比，缺少了直接根据位置访问元素的功能，不论访问哪一个元素，都必须从第一个元素开始遍历，当然这个访问时间是线性的，并且链表需要消耗更多的存储空间去记录元素之间的连接关系。\n\nforward_list设计的初衷就是高效，和最简单的单项链表一样高效，事实上它是唯一个没有size这个成员函数的容器。因为每一次计算大小你都需要从头到尾遍历一遍，这很影响性能。或者使用一个计数器成员变量，每次增删元素都去更新一下计数，这个不仅消耗了额外的存储而且也十分影响性能。\n\n## 使用方法\n### 构造方法\n``` cpp\n    std::forward_list<int> first;                      // default: empty\n    std::forward_list<int> second (3,77);              // fill: 3 seventy-sevens\n    std::forward_list<int> third (second.begin(), second.end()); // range initialization\n    std::forward_list<int> fourth (third);            // copy constructor\n    std::forward_list<int> fifth (std::move(fourth));  // move ctor. (fourth wasted)\n    std::forward_list<int> sixth = {3, 52, 25, 90};    // initializer_list constructor\n```\n### 访问方式\n1.使用迭代器\n2.新式for循环 for (int& x: mylist) \n\n### 常用函数\nassign 赋值函数，使用一个链表的一部分去初始化另外一个链表\n\nemplace_front 在链表头部插入元素\n\npush_front 和emplace_front一回事，都是在头部插入新元素\n\npop_front 删除并返回链表头部\n\nemplace_after 在迭代器后插入新元素，同时迭代器自增\n\ninsert_after 在迭代器后插入新元素，区别emplace_after的是可以插入多个元素\n\nerase_after 删除迭代器后的一个或多个元素\n\nswap  交换两个链表的内容\n\nresize 调整大小，如果n小于当前size，就截断；如果n大于当前size，就使用尾部元素的值进行扩展。\n\nclear 清空所有元素\n\nsplice_after 拼接两个链表\n\nremove 删除指定值得元素\n\nremove_if 牛逼，自定义一个bool类型的函数，判断链表中的元素是否满足这个函数的设定\n\nunique 牛逼，也可以自定义比较i和i+1，注意使用这个得前提是显得进行排序\n\nmerge 合并两个链表\n\nsort 排序，也可以自定义排序函数\n\nreverse 链表反转\n","slug":"STL系列三：forward-list","published":1,"updated":"2018-11-02T06:14:16.932Z","_id":"cjnyhwsny00046gv7mt2umw3v","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>forward_list是一个顺序容器，它的插入和删除操作都是固定的时间。</p>\n<p>它的实现是一个单向链表，所有的元素存储在不相关的内存区间，顺序试根据存储在元素中关联关系得到的。</p>\n<p>forward_list和list的区别在于，前者元素中仅仅记录了指向下一个元素的连接，后者的每一个元素同时记录了2个连接（既有指向下一个元素的又有指向前一个元素的），当然这样是的list消耗了更多的存储空间。但是在插入和删除操作上，forward_list更加的高效。</p>\n<p>和其他的顺序容器（array、vector、deque）相比较，forward_list在增删和移动数据上表现得更好，所以算法中大量的使用了它，比如排序算法。</p>\n<p>链表和其他的顺序容器相比，缺少了直接根据位置访问元素的功能，不论访问哪一个元素，都必须从第一个元素开始遍历，当然这个访问时间是线性的，并且链表需要消耗更多的存储空间去记录元素之间的连接关系。</p>\n<p>forward_list设计的初衷就是高效，和最简单的单项链表一样高效，事实上它是唯一个没有size这个成员函数的容器。因为每一次计算大小你都需要从头到尾遍历一遍，这很影响性能。或者使用一个计数器成员变量，每次增删元素都去更新一下计数，这个不仅消耗了额外的存储而且也十分影响性能。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; first;                      <span class=\"comment\">// default: empty</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; second (<span class=\"number\">3</span>,<span class=\"number\">77</span>);              <span class=\"comment\">// fill: 3 seventy-sevens</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; third (second.begin(), second.end()); <span class=\"comment\">// range initialization</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; fourth (third);            <span class=\"comment\">// copy constructor</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; fifth (<span class=\"built_in\">std</span>::move(fourth));  <span class=\"comment\">// move ctor. (fourth wasted)</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; sixth = &#123;<span class=\"number\">3</span>, <span class=\"number\">52</span>, <span class=\"number\">25</span>, <span class=\"number\">90</span>&#125;;    <span class=\"comment\">// initializer_list constructor</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h3><p>1.使用迭代器<br>2.新式for循环 for (int&amp; x: mylist) </p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>assign 赋值函数，使用一个链表的一部分去初始化另外一个链表</p>\n<p>emplace_front 在链表头部插入元素</p>\n<p>push_front 和emplace_front一回事，都是在头部插入新元素</p>\n<p>pop_front 删除并返回链表头部</p>\n<p>emplace_after 在迭代器后插入新元素，同时迭代器自增</p>\n<p>insert_after 在迭代器后插入新元素，区别emplace_after的是可以插入多个元素</p>\n<p>erase_after 删除迭代器后的一个或多个元素</p>\n<p>swap  交换两个链表的内容</p>\n<p>resize 调整大小，如果n小于当前size，就截断；如果n大于当前size，就使用尾部元素的值进行扩展。</p>\n<p>clear 清空所有元素</p>\n<p>splice_after 拼接两个链表</p>\n<p>remove 删除指定值得元素</p>\n<p>remove_if 牛逼，自定义一个bool类型的函数，判断链表中的元素是否满足这个函数的设定</p>\n<p>unique 牛逼，也可以自定义比较i和i+1，注意使用这个得前提是显得进行排序</p>\n<p>merge 合并两个链表</p>\n<p>sort 排序，也可以自定义排序函数</p>\n<p>reverse 链表反转</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>forward_list是一个顺序容器，它的插入和删除操作都是固定的时间。</p>\n<p>它的实现是一个单向链表，所有的元素存储在不相关的内存区间，顺序试根据存储在元素中关联关系得到的。</p>\n<p>forward_list和list的区别在于，前者元素中仅仅记录了指向下一个元素的连接，后者的每一个元素同时记录了2个连接（既有指向下一个元素的又有指向前一个元素的），当然这样是的list消耗了更多的存储空间。但是在插入和删除操作上，forward_list更加的高效。</p>\n<p>和其他的顺序容器（array、vector、deque）相比较，forward_list在增删和移动数据上表现得更好，所以算法中大量的使用了它，比如排序算法。</p>\n<p>链表和其他的顺序容器相比，缺少了直接根据位置访问元素的功能，不论访问哪一个元素，都必须从第一个元素开始遍历，当然这个访问时间是线性的，并且链表需要消耗更多的存储空间去记录元素之间的连接关系。</p>\n<p>forward_list设计的初衷就是高效，和最简单的单项链表一样高效，事实上它是唯一个没有size这个成员函数的容器。因为每一次计算大小你都需要从头到尾遍历一遍，这很影响性能。或者使用一个计数器成员变量，每次增删元素都去更新一下计数，这个不仅消耗了额外的存储而且也十分影响性能。</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; first;                      <span class=\"comment\">// default: empty</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; second (<span class=\"number\">3</span>,<span class=\"number\">77</span>);              <span class=\"comment\">// fill: 3 seventy-sevens</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; third (second.begin(), second.end()); <span class=\"comment\">// range initialization</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; fourth (third);            <span class=\"comment\">// copy constructor</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; fifth (<span class=\"built_in\">std</span>::move(fourth));  <span class=\"comment\">// move ctor. (fourth wasted)</span></span><br><span class=\"line\"><span class=\"built_in\">std</span>::forward_list&lt;<span class=\"keyword\">int</span>&gt; sixth = &#123;<span class=\"number\">3</span>, <span class=\"number\">52</span>, <span class=\"number\">25</span>, <span class=\"number\">90</span>&#125;;    <span class=\"comment\">// initializer_list constructor</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"访问方式\"><a href=\"#访问方式\" class=\"headerlink\" title=\"访问方式\"></a>访问方式</h3><p>1.使用迭代器<br>2.新式for循环 for (int&amp; x: mylist) </p>\n<h3 id=\"常用函数\"><a href=\"#常用函数\" class=\"headerlink\" title=\"常用函数\"></a>常用函数</h3><p>assign 赋值函数，使用一个链表的一部分去初始化另外一个链表</p>\n<p>emplace_front 在链表头部插入元素</p>\n<p>push_front 和emplace_front一回事，都是在头部插入新元素</p>\n<p>pop_front 删除并返回链表头部</p>\n<p>emplace_after 在迭代器后插入新元素，同时迭代器自增</p>\n<p>insert_after 在迭代器后插入新元素，区别emplace_after的是可以插入多个元素</p>\n<p>erase_after 删除迭代器后的一个或多个元素</p>\n<p>swap  交换两个链表的内容</p>\n<p>resize 调整大小，如果n小于当前size，就截断；如果n大于当前size，就使用尾部元素的值进行扩展。</p>\n<p>clear 清空所有元素</p>\n<p>splice_after 拼接两个链表</p>\n<p>remove 删除指定值得元素</p>\n<p>remove_if 牛逼，自定义一个bool类型的函数，判断链表中的元素是否满足这个函数的设定</p>\n<p>unique 牛逼，也可以自定义比较i和i+1，注意使用这个得前提是显得进行排序</p>\n<p>merge 合并两个链表</p>\n<p>sort 排序，也可以自定义排序函数</p>\n<p>reverse 链表反转</p>\n"},{"title":"STL系列四：list","date":"2018-11-02T06:11:16.000Z","_content":"## 简介\nlist是一个顺序容器，它的元素在任意位置的插入和删除操作是固定的时间，并且支持正向和逆向遍历。\n\nlist的底层实现是一个双向链表，元素存储在并不连续的内存上，通过记录相连元素的指针，来保证顺序；其实和forward_list很类似，但是forward-list更加小巧和快速。\n\n和标准的顺序容器（array、deque、vector）相比，list在插入。删除、移动元素上表现得更加高效，所以在算法中大量使用。\n\nlist最主要的缺点就是不能根据位置直接访问元素，不论你想访问第几个元素，都必须从头部开始遍历。另外一个问题，就是它需要消耗更多的存储空间去存储连接关系。","source":"_posts/STL系列四：list.md","raw":"---\ntitle: STL系列四：list\ndate: 2018-11-02 14:11:16\ncategories: STL\ntags: [c++,STL]\n---\n## 简介\nlist是一个顺序容器，它的元素在任意位置的插入和删除操作是固定的时间，并且支持正向和逆向遍历。\n\nlist的底层实现是一个双向链表，元素存储在并不连续的内存上，通过记录相连元素的指针，来保证顺序；其实和forward_list很类似，但是forward-list更加小巧和快速。\n\n和标准的顺序容器（array、deque、vector）相比，list在插入。删除、移动元素上表现得更加高效，所以在算法中大量使用。\n\nlist最主要的缺点就是不能根据位置直接访问元素，不论你想访问第几个元素，都必须从头部开始遍历。另外一个问题，就是它需要消耗更多的存储空间去存储连接关系。","slug":"STL系列四：list","published":1,"updated":"2018-11-02T06:24:44.779Z","_id":"cjnzmexrd00086gv7z6el43xv","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>list是一个顺序容器，它的元素在任意位置的插入和删除操作是固定的时间，并且支持正向和逆向遍历。</p>\n<p>list的底层实现是一个双向链表，元素存储在并不连续的内存上，通过记录相连元素的指针，来保证顺序；其实和forward_list很类似，但是forward-list更加小巧和快速。</p>\n<p>和标准的顺序容器（array、deque、vector）相比，list在插入。删除、移动元素上表现得更加高效，所以在算法中大量使用。</p>\n<p>list最主要的缺点就是不能根据位置直接访问元素，不论你想访问第几个元素，都必须从头部开始遍历。另外一个问题，就是它需要消耗更多的存储空间去存储连接关系。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>list是一个顺序容器，它的元素在任意位置的插入和删除操作是固定的时间，并且支持正向和逆向遍历。</p>\n<p>list的底层实现是一个双向链表，元素存储在并不连续的内存上，通过记录相连元素的指针，来保证顺序；其实和forward_list很类似，但是forward-list更加小巧和快速。</p>\n<p>和标准的顺序容器（array、deque、vector）相比，list在插入。删除、移动元素上表现得更加高效，所以在算法中大量使用。</p>\n<p>list最主要的缺点就是不能根据位置直接访问元素，不论你想访问第几个元素，都必须从头部开始遍历。另外一个问题，就是它需要消耗更多的存储空间去存储连接关系。</p>\n"},{"title":"mysql的ip函数陷阱","date":"2018-11-09T04:01:25.000Z","photos":["2018/11/09/mysql的ip函数陷阱/inet.jpg"],"_content":"## 简介\n网络编程中经常涉及到ip地址的转化，inet_ntoa、 inet_aton、inet_addr是最基本的api;\n\n原型：in_addr_t inet_addr(const char *cp);\n参数：字符串，一个点分十进制的IP地址\n返回值：32位网络字节序的ip\n\n原型：int inet_aton(const char *string, struct in_addr*addr);\n参数描述：\n1 输入参数string包含ASCII表示的IP地址。\n2 输出参数addr是32位网络字节序的ip\n\n原型：char*inet_ntoa(struct in_addr in);\n功能：将一个十进制网络字节序转换为点分十进制IP格式的字符串。\n\n### 例子\n\n``` cpp\n    #include <iostream>\n    #include <sys/socket.h>\n    #include <netinet/in.h>\n    #include <arpa/inet.h>\n    using namespace std;\n    int main(){\n    \n        struct in_addr my_addr1;\n        struct in_addr my_addr2;\n        char my_ip[] = \"1.2.3.4\";\n        \n        inet_aton(my_ip, &my_addr1);\n        my_addr2.s_addr = inet_addr(my_ip);\n    \n        cout <<\"inet_aton is [%d] \"<<my_addr1.s_addr<<endl;\n        cout <<\"inet_addr is [%d] \"<<my_addr2.s_addr<<endl;\n    \n        cout <<\"inet_ntoa is [%s] \"<< inet_ntoa(my_addr1)<<endl;\n        cout <<\"inet_ntoa is [%s] \"<< inet_ntoa(my_addr2)<<endl;                                             \n    \n        return 0;\n    \n    }\n\t\n    输出：\n    inet_aton is [%d] 67305985\n    inet_addr is [%d] 67305985\n    inet_ntoa is [%s] 1.2.3.4\n    inet_ntoa is [%s] 1.2.3.4\n```\n\n### 陷阱\n对于网络编程很熟悉的人，知道这些api其实默认都是基于网络字节序的，网络字节序是大尾端，主机存储一般是小尾端。\nmysql也提供的inet_aton和inet_ntoa这两个函数，但是他们默认是主机序的，和传统网络api刚好相反。\n<img src=\"inet.jpg\" width=\"80%\" height=\"80%\">","source":"_posts/mysql的ip函数陷阱.md","raw":"---\ntitle: mysql的ip函数陷阱\ndate: 2018-11-09 12:01:25\ncategories: 数据库\ntags: [数据库,网络]\nphotos: \"2018/11/09/mysql的ip函数陷阱/inet.jpg\"\n---\n## 简介\n网络编程中经常涉及到ip地址的转化，inet_ntoa、 inet_aton、inet_addr是最基本的api;\n\n原型：in_addr_t inet_addr(const char *cp);\n参数：字符串，一个点分十进制的IP地址\n返回值：32位网络字节序的ip\n\n原型：int inet_aton(const char *string, struct in_addr*addr);\n参数描述：\n1 输入参数string包含ASCII表示的IP地址。\n2 输出参数addr是32位网络字节序的ip\n\n原型：char*inet_ntoa(struct in_addr in);\n功能：将一个十进制网络字节序转换为点分十进制IP格式的字符串。\n\n### 例子\n\n``` cpp\n    #include <iostream>\n    #include <sys/socket.h>\n    #include <netinet/in.h>\n    #include <arpa/inet.h>\n    using namespace std;\n    int main(){\n    \n        struct in_addr my_addr1;\n        struct in_addr my_addr2;\n        char my_ip[] = \"1.2.3.4\";\n        \n        inet_aton(my_ip, &my_addr1);\n        my_addr2.s_addr = inet_addr(my_ip);\n    \n        cout <<\"inet_aton is [%d] \"<<my_addr1.s_addr<<endl;\n        cout <<\"inet_addr is [%d] \"<<my_addr2.s_addr<<endl;\n    \n        cout <<\"inet_ntoa is [%s] \"<< inet_ntoa(my_addr1)<<endl;\n        cout <<\"inet_ntoa is [%s] \"<< inet_ntoa(my_addr2)<<endl;                                             \n    \n        return 0;\n    \n    }\n\t\n    输出：\n    inet_aton is [%d] 67305985\n    inet_addr is [%d] 67305985\n    inet_ntoa is [%s] 1.2.3.4\n    inet_ntoa is [%s] 1.2.3.4\n```\n\n### 陷阱\n对于网络编程很熟悉的人，知道这些api其实默认都是基于网络字节序的，网络字节序是大尾端，主机存储一般是小尾端。\nmysql也提供的inet_aton和inet_ntoa这两个函数，但是他们默认是主机序的，和传统网络api刚好相反。\n<img src=\"inet.jpg\" width=\"80%\" height=\"80%\">","slug":"mysql的ip函数陷阱","published":1,"updated":"2018-11-09T04:09:09.863Z","_id":"cjo9huwpz000s6gv7lqtv0yjm","comments":1,"layout":"post","link":"","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>网络编程中经常涉及到ip地址的转化，inet_ntoa、 inet_aton、inet_addr是最基本的api;</p>\n<p>原型：in_addr_t inet_addr(const char *cp);<br>参数：字符串，一个点分十进制的IP地址<br>返回值：32位网络字节序的ip</p>\n<p>原型：int inet_aton(const char <em>string, struct in_addr</em>addr);<br>参数描述：<br>1 输入参数string包含ASCII表示的IP地址。<br>2 输出参数addr是32位网络字节序的ip</p>\n<p>原型：char*inet_ntoa(struct in_addr in);<br>功能：将一个十进制网络字节序转换为点分十进制IP格式的字符串。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">my_addr1</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">my_addr2</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> my_ip[] = <span class=\"string\">\"1.2.3.4\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    inet_aton(my_ip, &amp;my_addr1);</span><br><span class=\"line\">    my_addr2.s_addr = inet_addr(my_ip);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"inet_aton is [%d] \"</span>&lt;&lt;my_addr1.s_addr&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"inet_addr is [%d] \"</span>&lt;&lt;my_addr2.s_addr&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"inet_ntoa is [%s] \"</span>&lt;&lt; inet_ntoa(my_addr1)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"inet_ntoa is [%s] \"</span>&lt;&lt; inet_ntoa(my_addr2)&lt;&lt;<span class=\"built_in\">endl</span>;                                             </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">输出：</span><br><span class=\"line\">inet_aton is [%d] <span class=\"number\">67305985</span></span><br><span class=\"line\">inet_addr is [%d] <span class=\"number\">67305985</span></span><br><span class=\"line\">inet_ntoa is [%s] <span class=\"number\">1.2</span><span class=\"number\">.3</span><span class=\"number\">.4</span></span><br><span class=\"line\">inet_ntoa is [%s] <span class=\"number\">1.2</span><span class=\"number\">.3</span><span class=\"number\">.4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"陷阱\"><a href=\"#陷阱\" class=\"headerlink\" title=\"陷阱\"></a>陷阱</h3><p>对于网络编程很熟悉的人，知道这些api其实默认都是基于网络字节序的，网络字节序是大尾端，主机存储一般是小尾端。<br>mysql也提供的inet_aton和inet_ntoa这两个函数，但是他们默认是主机序的，和传统网络api刚好相反。<br><img src=\"/2018/11/09/mysql的ip函数陷阱/inet.jpg\" width=\"80%\" height=\"80%\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>网络编程中经常涉及到ip地址的转化，inet_ntoa、 inet_aton、inet_addr是最基本的api;</p>\n<p>原型：in_addr_t inet_addr(const char *cp);<br>参数：字符串，一个点分十进制的IP地址<br>返回值：32位网络字节序的ip</p>\n<p>原型：int inet_aton(const char <em>string, struct in_addr</em>addr);<br>参数描述：<br>1 输入参数string包含ASCII表示的IP地址。<br>2 输出参数addr是32位网络字节序的ip</p>\n<p>原型：char*inet_ntoa(struct in_addr in);<br>功能：将一个十进制网络字节序转换为点分十进制IP格式的字符串。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;sys/socket.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;netinet/in.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;arpa/inet.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">my_addr1</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">in_addr</span> <span class=\"title\">my_addr2</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> my_ip[] = <span class=\"string\">\"1.2.3.4\"</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    inet_aton(my_ip, &amp;my_addr1);</span><br><span class=\"line\">    my_addr2.s_addr = inet_addr(my_ip);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"inet_aton is [%d] \"</span>&lt;&lt;my_addr1.s_addr&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"inet_addr is [%d] \"</span>&lt;&lt;my_addr2.s_addr&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"inet_ntoa is [%s] \"</span>&lt;&lt; inet_ntoa(my_addr1)&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt;<span class=\"string\">\"inet_ntoa is [%s] \"</span>&lt;&lt; inet_ntoa(my_addr2)&lt;&lt;<span class=\"built_in\">endl</span>;                                             </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">输出：</span><br><span class=\"line\">inet_aton is [%d] <span class=\"number\">67305985</span></span><br><span class=\"line\">inet_addr is [%d] <span class=\"number\">67305985</span></span><br><span class=\"line\">inet_ntoa is [%s] <span class=\"number\">1.2</span><span class=\"number\">.3</span><span class=\"number\">.4</span></span><br><span class=\"line\">inet_ntoa is [%s] <span class=\"number\">1.2</span><span class=\"number\">.3</span><span class=\"number\">.4</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"陷阱\"><a href=\"#陷阱\" class=\"headerlink\" title=\"陷阱\"></a>陷阱</h3><p>对于网络编程很熟悉的人，知道这些api其实默认都是基于网络字节序的，网络字节序是大尾端，主机存储一般是小尾端。<br>mysql也提供的inet_aton和inet_ntoa这两个函数，但是他们默认是主机序的，和传统网络api刚好相反。<br><img src=\"/2018/11/09/mysql的ip函数陷阱/inet.jpg\" width=\"80%\" height=\"80%\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/mysql索引/top.png","slug":"top.png","post":"cjny09rg6000e40v7bphsxiuf","modified":0,"renderable":0},{"_id":"source/_posts/头文件重复引用/top.jpg","slug":"top.jpg","post":"cjny09rga000i40v7kt9od23l","modified":0,"renderable":0},{"_id":"source/_posts/头文件重复引用/头文件.pptx","slug":"头文件.pptx","post":"cjny09rga000i40v7kt9od23l","modified":0,"renderable":0},{"_id":"source/_posts/tcp状态/tcp_open_close.jpg","slug":"tcp_open_close.jpg","post":"cjny09rgf000p40v7vwylfzna","modified":0,"renderable":0},{"_id":"source/_posts/tcp状态/tcp_state.gif","slug":"tcp_state.gif","post":"cjny09rgf000p40v7vwylfzna","modified":0,"renderable":0},{"_id":"source/_posts/static关键字/static.pptx","slug":"static.pptx","post":"cjny09rg2000a40v7mu6jajvi","modified":0,"renderable":0},{"_id":"source/_posts/static关键字/top.png","slug":"top.png","post":"cjny09rg2000a40v7mu6jajvi","modified":0,"renderable":0},{"_id":"source/_posts/static关键字/内存分布.png","slug":"内存分布.png","post":"cjny09rg2000a40v7mu6jajvi","modified":0,"renderable":0},{"_id":"source/_posts/mysql的ip函数陷阱/inet.jpg","slug":"inet.jpg","post":"cjo9huwpz000s6gv7lqtv0yjm","modified":1,"renderable":0}],"PostCategory":[{"post_id":"cjny09rfn000340v7r0zrr0a1","category_id":"cjny09rfv000640v707o0rp9d","_id":"cjny09rg7000f40v79d6vveis"},{"post_id":"cjny09rfs000540v7h0ysqcvm","category_id":"cjny09rg3000b40v7296obswt","_id":"cjny09rge000m40v7zk5q0u1w"},{"post_id":"cjny09rga000i40v7kt9od23l","category_id":"cjny09rg3000b40v7296obswt","_id":"cjny09rgh000q40v7d7vjez5e"},{"post_id":"cjny09rfz000840v7nqs3ob3m","category_id":"cjny09rg8000g40v737swoa4y","_id":"cjny09rgi000t40v74iz6o65u"},{"post_id":"cjny09rgc000k40v78idz82yg","category_id":"cjny09rg8000g40v737swoa4y","_id":"cjny09rgj000v40v76hjm6ouy"},{"post_id":"cjny09rg0000940v7ug793qg4","category_id":"cjny09rgf000o40v7egvt6ms9","_id":"cjny09rgl000z40v7p9r0w3e9"},{"post_id":"cjny09rg2000a40v7mu6jajvi","category_id":"cjny09rg3000b40v7296obswt","_id":"cjny09rgm001240v7jl6fqk03"},{"post_id":"cjny09rg5000d40v7waye554v","category_id":"cjny09rgf000o40v7egvt6ms9","_id":"cjny09rgo001640v7ut5wgmrk"},{"post_id":"cjny09rg6000e40v7bphsxiuf","category_id":"cjny09rg8000g40v737swoa4y","_id":"cjny09rgp001940v7ad7zf71g"},{"post_id":"cjny09rgf000p40v7vwylfzna","category_id":"cjny09rgn001540v77dzgpc0w","_id":"cjny09rgq001d40v7m9dizc78"},{"post_id":"cjny09rn3001p40v7ge3crza8","category_id":"cjny09rg8000g40v737swoa4y","_id":"cjny09rna001r40v7rm890aeu"},{"post_id":"cjny0p64800006gv7kwpchf02","category_id":"cjny09rfv000640v707o0rp9d","_id":"cjny0pwpy00036gv7jfctx9n6"},{"post_id":"cjnyhwsny00046gv7mt2umw3v","category_id":"cjny09rfv000640v707o0rp9d","_id":"cjnyigzfx00076gv7qn2d59z3"},{"post_id":"cjnzmexrd00086gv7z6el43xv","category_id":"cjny09rfv000640v707o0rp9d","_id":"cjnzmw9oi000b6gv75d9wyw94"},{"post_id":"cjo9huwpz000s6gv7lqtv0yjm","category_id":"cjny09rg8000g40v737swoa4y","_id":"cjo9hwlpr000v6gv7w5goatsr"}],"PostTag":[{"post_id":"cjny09rfn000340v7r0zrr0a1","tag_id":"cjny09rfy000740v7dualzcky","_id":"cjny09rgb000j40v7hipjjqw4"},{"post_id":"cjny09rfn000340v7r0zrr0a1","tag_id":"cjny09rg4000c40v7j0cfwff0","_id":"cjny09rge000l40v7d8d76chu"},{"post_id":"cjny09rfs000540v7h0ysqcvm","tag_id":"cjny09rfy000740v7dualzcky","_id":"cjny09rgj000u40v7hn4gptv4"},{"post_id":"cjny09rfs000540v7h0ysqcvm","tag_id":"cjny09rge000n40v7j8wqbh63","_id":"cjny09rgk000w40v755z6w5e9"},{"post_id":"cjny09rfz000840v7nqs3ob3m","tag_id":"cjny09rgi000r40v730aaobih","_id":"cjny09rgm001040v7bp7rawbq"},{"post_id":"cjny09rg0000940v7ug793qg4","tag_id":"cjny09rgl000y40v7x539k7v0","_id":"cjny09rgn001440v7xkt5xbey"},{"post_id":"cjny09rg2000a40v7mu6jajvi","tag_id":"cjny09rfy000740v7dualzcky","_id":"cjny09rgp001840v7hpxvg4ds"},{"post_id":"cjny09rg2000a40v7mu6jajvi","tag_id":"cjny09rge000n40v7j8wqbh63","_id":"cjny09rgp001a40v76q2lu17e"},{"post_id":"cjny09rg5000d40v7waye554v","tag_id":"cjny09rgl000y40v7x539k7v0","_id":"cjny09rgq001c40v75uxap5mq"},{"post_id":"cjny09rg6000e40v7bphsxiuf","tag_id":"cjny09rgp001b40v7kkphi2r1","_id":"cjny09rgr001f40v70639zjcd"},{"post_id":"cjny09rga000i40v7kt9od23l","tag_id":"cjny09rgr001e40v72h0tatsv","_id":"cjny09rgt001j40v76po5wd11"},{"post_id":"cjny09rga000i40v7kt9od23l","tag_id":"cjny09rge000n40v7j8wqbh63","_id":"cjny09rgt001k40v77yx8uat8"},{"post_id":"cjny09rga000i40v7kt9od23l","tag_id":"cjny09rgs001h40v7gusuuhz4","_id":"cjny09rgu001m40v7ozo2fun2"},{"post_id":"cjny09rgc000k40v78idz82yg","tag_id":"cjny09rgi000r40v730aaobih","_id":"cjny09rgu001n40v7aeeqnf3q"},{"post_id":"cjny09rgf000p40v7vwylfzna","tag_id":"cjny09rgu001l40v7ntdy4qdz","_id":"cjny09rgu001o40v7sbonvw6b"},{"post_id":"cjny09rn3001p40v7ge3crza8","tag_id":"cjny09rgp001b40v7kkphi2r1","_id":"cjny09rn8001q40v7b6fvi6sz"},{"post_id":"cjny0p64800006gv7kwpchf02","tag_id":"cjny09rfy000740v7dualzcky","_id":"cjny0pwpx00016gv7mpbcx86r"},{"post_id":"cjny0p64800006gv7kwpchf02","tag_id":"cjny09rg4000c40v7j0cfwff0","_id":"cjny0pwpy00026gv7057hrzsy"},{"post_id":"cjnyhwsny00046gv7mt2umw3v","tag_id":"cjny09rfy000740v7dualzcky","_id":"cjnyigzfw00056gv7dpc4i0ar"},{"post_id":"cjnyhwsny00046gv7mt2umw3v","tag_id":"cjny09rg4000c40v7j0cfwff0","_id":"cjnyigzfx00066gv76s9x5pu5"},{"post_id":"cjnzmexrd00086gv7z6el43xv","tag_id":"cjny09rfy000740v7dualzcky","_id":"cjnzmw9og00096gv742z9mf8y"},{"post_id":"cjnzmexrd00086gv7z6el43xv","tag_id":"cjny09rg4000c40v7j0cfwff0","_id":"cjnzmw9oh000a6gv7qr0vz02l"},{"post_id":"cjo9huwpz000s6gv7lqtv0yjm","tag_id":"cjny09rgi000r40v730aaobih","_id":"cjo9hwlpq000t6gv7bw95ewul"},{"post_id":"cjo9huwpz000s6gv7lqtv0yjm","tag_id":"cjny09rgu001l40v7ntdy4qdz","_id":"cjo9hwlpq000u6gv7yab4huh7"}],"Tag":[{"name":"c++","_id":"cjny09rfy000740v7dualzcky"},{"name":"STL","_id":"cjny09rg4000c40v7j0cfwff0"},{"name":"static","_id":"cjny09rge000n40v7j8wqbh63"},{"name":"数据库","_id":"cjny09rgi000r40v730aaobih"},{"name":"工具","_id":"cjny09rgl000y40v7x539k7v0"},{"name":"数据库，索引","_id":"cjny09rgp001b40v7kkphi2r1"},{"name":"头文件","_id":"cjny09rgr001e40v72h0tatsv"},{"name":"extern","_id":"cjny09rgs001h40v7gusuuhz4"},{"name":"网络","_id":"cjny09rgu001l40v7ntdy4qdz"}]}}